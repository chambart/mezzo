(* Standard types *)

data bool = True | False

data option a = Some { contents: a } | None

mutable data ref a = Ref {
  contents: a;
}

(* Lists *)

mutable data xlist a =
  | XCons { xhead: a; xtail: xlist a }
  | XNil

data list a =
  | Cons { head: a; tail: list a }
  | Nil

(* Standard types *)

val none =
  None

val some [a] (consumes x: a): option a =
  Some { contents = x }

val true = True
val false = False

(* References *)

val newref [a] (consumes x: a): ref a =
  Ref { contents = x }

val (!) [a] (consumes x: ref a): (a | x @ ref unknown) =
  x.contents

val (:=) [a, b] (consumes x: ref a, consumes c: b): ( | x @ ref b) =
  x.contents <- c

(* Lists *)

val (nil: [a] list a) =
  Nil

val cons [a] (consumes hd: a, consumes tl: list a): list a =
  Cons { head = hd; tail = tl }
