data mutable ref a = Ref { contents: a }

val sswap [a, b]
  (consumes r: ref a, consumes s: ref b)
: (| r @ ref b * s @ ref a)
=
  let tmp = r.contents in
  r.contents <- s.contents;
  s.contents <- tmp

data mutable pool a = Pool {} adopts ref a

val wswap [a] (p: pool a, r: dynamic, s: dynamic) : () =
  if r != s then begin
    take r from p;
    take s from p;
    sswap (r, s);
    give s to p;
    give r to p
  end

