
data list a =
  | Nil
  | Cons { head: a; tail: list a }

val rec length [a] (xs: list a) : int =
  if xs then 1 + length xs.tail else 0

data foo =
  | Nil
  | Cons { head: (); tail: () }

data mutable ref a =
  Ref { contents: a }

val ref_length [a] (r: ref (list a)) : int =
  (* This should fail because "Cons" and "Nil" now belong to type "foo" *)
  match r.contents with
  | Nil  -> fail
  | Cons -> fail
  end
