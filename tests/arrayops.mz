open array

(* A generic loop over a segment of an array. *)

val rec iter_segment [a, p : PERM] (f: (i: int | x @ array a * p) -> (), x: array a, i: int, j: int | p) : () =
  if i < j then begin
    f(i);
    iter_segment (f, x, i+1, j)
  end

(* A generic loop over an entire array. *)

val rec iter_array [a, p : PERM] (f: (i: int | x @ array a * p) -> (), x: array a | p) : () =
  iter_segment (f, x, 0, length x)

(* Creating and initializing an array. *)

val init [a] duplicable a => (n: int, f: int -> a) : array a =
  if n = 0 then
    zero [a] () (* TEMPORARY get rid of this type application *)
  else begin
    let x = create (n, f 0) in
    let init (i: int | x @ array a) : () =
      set (x, i, f i)
    in
    iter_segment (init, x, 1, n);
    x
  end

