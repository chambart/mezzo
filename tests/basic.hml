(* This is just a sample file. Try changing menhir to menhir --trace in the
 * Makefile to see the tokens being accepted and/or rejected. *)
data t a =
  | Foo
  | Bar {
    baz: a;
  }

data tree a =
  | Leaf
  | Node {
      datum: a;
      left: tree a;
      right: tree a
    }

data ty = DummyType

data typechecker =
  TC { typechecker: [a] (consumes t: tree a) -> (ty, permission t: tree ty) }

data list a =
  | Nil
  | Cons { head: a; tail: list a }

data int = Zero

data bool = False | True 

data listops =
  ListOps {
    length: [a] list a -> int;
    length: [a] (consumes xs: list a) -> (result: int, permission xs: list a); (* more explicit form *)
    length: [a] (consumes xs: unknown, consumes permission xs: list a) ->
                (result: int, permission xs: list a); (* even more explicit form *)
    find: [key, a] (* duplicable a => *) (list (key, a), (key, key) -> bool, key) -> a;
    concat: [a] (consumes l1: list a, consumes l2: list a) -> (l3: list a)
  }

exclusive data foo a b c =
  Foo {
    bar: a;
    baz: baz b c a;
  }

data baz a b c =
  Baz {
    foo: foo a b c;
  }

data v α = V {
  foo: u α;
}

data u α = U {
  bar: α;
  baz: v α;
}

(* The example discussed on the board. Takes three rounds to get to the
 * fixpoint. *)
data t1 a b = T1 {
  foo: t2 a b;
}

data t2 a b = T2 {
  bar: t1 (a, b) b;
  baz: a;
}

(* Only b and d should be constrained. *)
data odd a b c d = S { foo: b; bar: d }

(* [list_of_refs] should be affine *)
exclusive data ref a = Ref { contents: a }
data list_of_refs a = L { list: list (ref a) }

(* data not_well_kinded container a = N { contents: container a; } *)

data should_be_dup a = D {
  foo: Nil;
  bar: a;
  foo: Cons { head: a; tail: list a };
}

data should_be_aff a = A {
  foo: Cons { head: ref a; tail: list (ref a) };
}
