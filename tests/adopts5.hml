(* We make sure the merge operation is capable of merging “A adopts ⊥” with
 * “B adopts adoptee”, which implies recursively merging the adopts clauses. *)
mutable data adoptee = Adoptee
mutable data adopter = A | B adopts adoptee
data bool = True | False

val f (consumes x: adopter): adopter =
  (* Don't use a top-level match, otherwise it's too easy (since we propagate
   * the annotations from the return type of the function. *)
  let x =
    if True then
      A
    else
      match x with B -> x end
  in
  x

val g (): adopter =
  let x =
    if True then A else B
  in
  x
