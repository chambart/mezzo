open either

(* Idioms. *)

alias focused a (post: perm) =
  (x: a, f: osf::osf (| x @ a) (| post))

(* Definition of generic (OO-style) iterators. *)

data iterator_s (s : perm) a (post : perm) =
  Iterator {
    next: (| consumes s) -> either (focused a s) (| post);
    stop: (| consumes s) -> (| post)
  | s }

alias iterator a (post : perm) =
  { s : perm } iterator_s s a post

(* Re-implementation of list iterators. *)

alias list_iterator a (post : perm) =
  ref (focused (list::list a) post)

val new_list_iterator [a] (consumes l: list::list a): list_iterator a (l @ list::list a) =
  newref (l, fun (): () = ())

val next
  [a, post : perm]
  (consumes it: list_iterator a post)
: either (focused a (it @ list_iterator a post)) (| post) =

  let l, rewind_to_list = !it in
  match l with
  | list::Nil ->
    rewind_to_list ();
    right ()
  | list::Cons { head; tail } ->
      it := (tail, rewind_to_list);

      let flex p : perm in
      (* By unpacking the [osf::osf] definition, we have:
         p * rewind_to_list @ (| consumes (l @ list a) * p) -> (| post)
      *)
      
      (* This is a bit heavy: we create a new [rewind_to_iterator]
         function for each value returned by [next].

         Its purpose is, provided the needed permissions to rewind,
         namely [head @ a], to repack [rewind_to_list] so we can have [it
         @ list_iterator a post] again.
      *)
      let rewind_to_iterator (|
          consumes (
            head @ a *
            it @ Ref { contents: (=tail, =rewind_to_list) } *
            (* The following bunch of permissions will be abstracted
               by the existential quantification of the [osf::osf]
               alias *)
            l @ list::Cons { head; tail } * tail @ list::list a * p
          )
      ): (| it @ list_iterator a post)
          =
        pack rewind_to_list @ osf::osf (| tail @ list::list a) (| post)
          witness (p * (head @ a) * (l @ list::Cons { head; tail }));

        assert (rewind_to_list @ osf::osf (| tail @ list::list a) (| post));
        ()
      in

      (* This assert is superfluous. *)
      assert (rewind_to_iterator @ osf::osf (| head @ a) (| it @ list_iterator a post));

      left (head, rewind_to_iterator)
  end

val stop [a, post: perm]
  (consumes it: list_iterator a post):
  (| post) =
  let _, rewind_to_list = !it in
  rewind_to_list ()

(* Wrapping an ADT-style iterator into a generic (OO-style) iterator. *)

val wrap [a, i, post: perm] (
  consumes it: i,
  next: (consumes it: i) -> either (focused a (it @ i)) (| post),
  stop: (consumes it: i) -> (| post)
): iterator a post =
  Iterator {
    next = (fun (| consumes it @ i): either (focused a (it @ i)) (| post) = next it);
    stop = (fun (| consumes it @ i): (| post) = stop it)
  }

val new_generic_list_iterator [a] (consumes l: list::list a) : iterator a (l @ list::list a) =
  let it = new_list_iterator l in
  let alias post : perm = l @ list::list a in
  wrap [a, (list_iterator a post), post]
    (it, next [a, post], stop [a, post])
    
(* Comparison of two generic iterators. *)
    
val rec equal [a, post1 : perm, post2 : perm, p : perm] (
  eq: (a, a | p) -> bool,
  consumes i1: iterator a post1,
  consumes i2: iterator a post2
| p
) : (bool | post1 * post2) =

  match i1.next(), i2.next() with
  | Right, Right ->
    True
  | Left { contents = (x1, rewind1) }, Left { contents = (x2, rewind2) } ->
    if eq (x1, x2) then begin
      rewind1 ();
      rewind2 ();
      equal (eq, i1, i2)
    end
    else begin
      rewind1 ();
      rewind2 ();
      i1.stop ();
      i2.stop ();
      False
    end
  | Left { contents = (_, rewind1) }, Right ->
    rewind1 ();
    i1.stop ();
    False
  | Right, Left { contents = (_, rewind2) } ->
    rewind2 ();
    i2.stop ();
    False
  end

(* Calls [f] on each element of the iterator [it] *)
val rec iter [a, post: perm, p: perm] (
  consumes it: iterator a post,
  f: (a | p) -> ()
| p): (| post)
=
  match it.next () with
  | Right ->
    ()
  | Left { contents = (x, rewind_to_iter) } ->
    f x;
    rewind_to_iter ();
    iter (it, f)
  end 

val identity [a, p: perm, post: perm] (
  consumes it: iterator a post
): iterator a post
=
  (* Not used *)
  let alias st: perm = it @ iterator a post in

  let next (| consumes it @ iterator a post):
      either (focused a (it @ iterator a post)) (| post) =
    match it.next () with
    | Right -> right ()
    | Left { contents } -> left contents
    end 
  in

  let stop (| consumes it @ iterator a post): (| post) =
    it.stop ()
  in

  Iterator { next; stop }

(* filter: constructs a new iterator, returning only the elements of
   [it] that match the predicate [f] *)
val filter [a, p: perm, post: perm] (
  consumes it: iterator a post,
  f: (a | p) -> bool
| consumes p) : iterator a (p * post)
=
  (* An abbreviation for the internal state of the new iterator.
     It contains the underlying iterator and the permission [p],
     which represents the internal state of [f]. *)
  let alias s : perm = p * it @ iterator a post in

  let rec next (| consumes s) : either (focused a s) (| post * p) =

    let flex it_st: perm in

    let e = it.next() in
    match e with
    | Right ->
        (* The underlying iterator is finished. We are finished as well. *)
        e
    | Left { contents = (x, surrender) } ->
        (* The underlying iterator produces [x], together with a magic
           wand [surrender], which we must use to signal that we are done
           with [x]. *)
        if f x then begin
          (* We would like to keep [x]. *)
          (* assert (surrender @ osf::osf (| x @ a) (| it_st)); *)
          let flex q: perm in
          assert (q * surrender @ (| consumes (q * x @ a)) -> (| it_st));
          assert (q * surrender @ (| consumes (p * q * x @ a)) -> (| p * it_st));

          (* assert (surrender @ osf::osf (| x @ a) (| p * it_st)); *)

          e
        end
        else begin
          (* We would like to skip [x]. Signal that we are done with it,
             and look for the next element. *)
          surrender();
          next()
        end
    end 
  in

  let stop (| consumes s): (| post * p) =
    it.stop ()
  in

  Iterator { next; stop }

(* map: constructs a new iterator, returning [f x] for each element
   [x] of [it]. Note that [f] cannot consume the elements of [it] so
   that [post] can be finally returned. *)
val map [a, b, p: perm, post: perm] (
  consumes it: iterator a post,
  f: (a | p) -> b
| consumes p): iterator b (p * post)
=
  let next (| consumes (p * it @ iterator a post)):
      either (focused b (p * it @ iterator a post)) (| post * p) =
    
    let flex it_st: perm in
    match it.next () with
    | Right ->
      right ()
    | Left { contents = (x, rewind_to_it) } ->
      let flex q: perm in
      assert (q * rewind_to_it @ (| consumes (q * x @ a)) -> (| it_st));
      assert (q * rewind_to_it @ (| consumes (p * q * x @ a)) -> (| p * it_st));
      left (f x, rewind_to_it)
    end 
  in

  let stop (| consumes (it @ iterator a post * p)): (| post * p) =
    it.stop ()
  in

  Iterator { next; stop }

(* Classical fold_left on the elements of the iterator *)
val rec fold_left [a, b, post: perm] (
  f: (consumes b, a) -> b,
  consumes accu: b,
  consumes it: iterator a post
): (b | post)
=
  match it.next () with
  | Right ->
    accu
  | Left { contents = (x, rewind_to_it) } ->
    let new_accu = f (accu, x) in
    rewind_to_it ();
    fold_left (f, new_accu, it)
  end 

(* Drops the [n] first elements of the iterator - that is, [drop]
   calls [it.next ()] [n] times *)
val rec drop [a, post: perm] (
  consumes it: iterator a post,
  n: int
): either (| it @ iterator a post) (| post)
  =
  if n <= 0 then
    left ()
  else
    match it.next () with
    | Right ->
      right ()
    | Left { contents = (_, rewind_to_it) } ->
      rewind_to_it ();
      drop (it, n-1)
    end 

(* Drops elements of [it] of the iterator while the predicate [pred]
   evaluates to [True] on them *)
val rec dropWhile [a, post: perm, p: perm] (
  consumes it: iterator a post,
  pred: (a | p) -> bool
| p): either (focused a (it @ iterator a post)) (| post)
=
  match it.next () with
  | Right ->
    right ()
  | Left { contents = (x, rewind_to_it) } ->
    if not (pred x) then (
      left (x, rewind_to_it)
    ) else (
      rewind_to_it ();
      dropWhile (it, pred)
    )
  end 

(*
Local Variables:
compile-command: "../mezzo fpiterator-focused.mz"
End:
*)

