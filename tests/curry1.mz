mutable data foo = Foo

val fst [t, u] (x: t): (y: u | consumes x @ t) -> t =
  fun (y: u | consumes x @ t): t =
    x

val snd [t, u] (x: t): (consumes y: u) -> u =
  fun (consumes y: u): u =
    y

val (test0: foo) = fst Foo (Foo, Foo)

val (test: (foo, (foo, foo))) =
  (fst Foo (Foo, Foo), snd Foo (Foo, Foo))
