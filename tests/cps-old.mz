(* An old version of list iteration in CPS style, where the continuations
   take Boolean parameters (see request and outcome) in order to allow
   early termination. *)

open list

data request =
  | Stop
  | Continue

data outcome =
  | Stopped
  | Done

val rec cps_iter [a, b, p : perm] (
  (* The permission [xs @ list a] is taken away; it will be passed on to
     the continuation [k]. *)
  consumes xs: list a,
  (* The user-supplied iteratee [f] has access to one list element, [x], at
     type [a], and must return the permission [x @ a] to its own
     continuation. Furthermore, it must be parametric in a permission [q]
     which is passed to [f] and which [f] must pass on to its own
     continuation. (This implies that [f] invokes its continuation at most
     once.) The answer type of [f] is [b], the same as the answer type of
     [cps_iter], because [cps_iter] may or may not call [f]. The function [f]
     passes a request to its continuation, which indicates whether the
     iteration should continue. *)
  f: [q : perm] (
    consumes x: a,
    (request | consumes (x @ a * q)) -> b
  | consumes q
  ) -> b,
  (* The continuation [k] receives the final outcome of [cps_iter]. It
     indicates whether the iteration went all the way to the end of the list,
     or was prematurely stopped. Furthermore, [k] recovers the ownership of
     the list [xs]. Finally, [cps_iter] is parametric in a permission [p],
     which [cps_iter] consumes and passes on to its continuation [k]. *)
  k: (outcome | consumes (p * xs @ list a)) -> b
| consumes p
) : b =
  match xs with
  | Nil ->
      (* The list is empty. We are done. Easy! *)
      k Done
  | Cons { head } ->
      (* The list is non-empty. The first thing to do is to call [f].
	 All of our permissions are transmitted to [f]. Indeed, the
	 permission [head @ a] is explicitly requested by [f], and
	 our other permissions collectively become the parameter [q]
	 that [f] passes on to its continuation. *)
      f
	[ q = (xs @ Cons { head; tail: list a } * p) ] (* optional annotation! *)
	(head,
	fun (r : request | consumes (head @ a * xs @ Cons { head; tail: list a } * p)) : b =
	  (* We are now in the continuation of [f]. Our permissions
	     have been passed back to us, so we are still in good
	     shape. *)
	  match r with
	  | Stop ->
	      (* The request produced by [f] is [Stop]. Easy. We are
		 able to reconstruct [xs @ list a], which [k] requires. *)
	      k Stopped
	  | Continue ->
	      (* The request produced by [f] is [Continue]. This is
		 the trickier case. The code is simple: it is just
		 a recursive call. The trick is in understanding the
		 permissions that will be passed to [k]. Officially,
		 [k] requires [p] and [xs @ list a]. It will receive
		 [p * xs @ Cons { head: a; tail }] and [tail @ list a].
		 Up to a recombination, these are the same, so the call
		 is well-typed. *)
	      let tail = xs.tail in
  	      cps_iter [ p = (p * xs @ Cons { head: a; tail }) ] (tail, f, k)
	  end
	)
  end

(* Now, suppose [f] does not need to capture its continuation. We wrap the
   call to [f] within a monadic [return], and we recover a normal [iter]
   function. *)

val rec normal_iter [a] (
  xs: list a,
  f : a -> request
) : outcome =

  (* Wrap [f], which is a normal function, to obtain a function in CPS
     style, which invokes its continuation [k] just once at the end.
     This function is in fact polymorphic in its answer type; this is
     a more general type than required by [cps_iter], and reflects the
     fact that [wrapped_f] does not have a control effect. *)
  let wrapped_f [b, q : perm] (
    consumes x: a,
    k: (request | consumes (x @ a * q)) -> b
  | consumes q
  ) : b =
    k (f x)
  in

  (* Define an identity continuation. This amounts to enclosing the
     call to [cps_iter] within a [reset]. This continuation will be
     invoked at the very end of the iteration, and will have access
     (again) to the entire list [xs @ list a]. *)
  let id (b : outcome | xs @ list a) : outcome =
    b
  in

  (* Invoke [cps_iter]. The type [b] is instantiated with [outcome | xs @ list a].
     The permission [p] is instantiated with [empty]. *)
  cps_iter
    [a, (outcome | xs @ list a), empty]
    (xs,
     wrapped_f [(outcome | xs @ list a)],
     id)

(* Now, let's try to invert [cps_iter] and obtain an iterator. *)

(* A iterator is either finished, or a pair of an element and a
   captured continuation that expects precisely this element,
   and which (when invoked) produces another iterator. (Thus,
   the type iterator is recursive. It is a type of streams.) *)

(* A difficulty is that the captured continuation expects a
   certain permission, which corresponds to [q] in the type
   of [cps_iter]. We must store a pair of the continuation
   and the permission [q] that it requires -- this is
   exactly the encoding of one-shot functions. It requires
   an existential quantification over [q]. (An attempt to
   parameterize the type [iterator] over [q] would fail,
   as we would not know which parameter to supply in the
   recursive occurrence of [iterator].) *)

(* In a sense, the existential quantification over [pre] serves
   exactly to hide the type ``segment of a data structure'',
   which we do not wish to explicitly express. *)

(* The following definitions are cumbersome, due to the lack of type
   abbreviations and the need to work around certain current bugs. *)

data iterator a (post : perm) =
    IFinished { outcome: outcome | post }
  | IAvailable { content: { pre : perm } product a pre post }

and product a (pre : perm) (post : perm) =
  | Product { content: (
      head: a,
      continuation: (request | consumes (head @ a * pre)) -> iterator a post
        (* If the [request] is [Stop], then the resulting iterator will
	   certainly be [IFinished]. Unfortunately, we cannot encode this
	   property in the type of the continuation. *)
      | pre
    )}

(* The function [yield] captures the current continuation [k] and uses it
   to construct an iterator. The iteration is suspended (i.e. [k] is not
   invoked) and the iterator is returned. *)

val yield [a, q : perm, post : perm] (
  consumes x : a,
  k: (request | consumes (x @ a * q)) -> iterator a post
  | consumes q
) : iterator a post =
  (* We capture the continuation [k] and store it.
     There is an implicit [shift]. *)
  IAvailable { content = Product { content = (x, k) } }

(* Applying [cps_iter] to [yield] allows constructing an iterator for a list
   [xs]. This iterator produces elements of type [a] and, once finished, allows
   recovering the ownership of the list [xs]. *)

val iterate [a] (
  consumes xs: list a
) : iterator a (xs @ list a) =
  (* Invoke [cps_iter]. The answer type [b] is instantiated with [iterator a]. *)
  cps_iter (
    xs,
    yield,
    fun (o : outcome | consumes xs @ list a) : iterator a (xs @ list a) =
      IFinished { outcome = o }
  )

(* One can use an iterator to iterate in the same style as with a normal
   [iter] function. *)

val rec use_iterator [a, p : perm, post : perm] (
  consumes i: iterator a post,
  f : (a | p) -> request
  | p
) : (outcome | post) =
  match i with
  | IFinished ->
      (* If the iterator is finished, report its outcome. The permission
	 [post] is available, so we are happy. *)
      i.outcome
  | IAvailable ->
      (* If the iterator is not finished, then we have an element [x] and
	 a function [next] that will provide us with a new iterator once
	 we surrender the ownership of [x]. *)
      let x, next = i.content.content in
      (* Submit [x] to the user function [f], which returns a request to
	 stop or continue. *)
      let r = f x in
      (* Pass the request on to [next], which returns a new iterator. *)
      let i = next r in
      (* Continue with this new iterator. *)
      use_iterator (i, f)
  end

(* One can construct a list of the elements of an iterator. This requires
   the type [a] to be duplicable, because at the end, we own both the newly
   created list and the original data structure (represented by the abstract
   permission [post]). *)

val rec elements_of_iterator [a, post : perm] duplicable a => (
  consumes i: iterator a post
) : (list a | post) =
  (* Create a reference to hold the list of elements. *)
  let r = newref nil in
  let _ : outcome =
    use_iterator (
      i,
      fun (x: a | r @ ref (list a)) : request =
	r := cons (x, !r);
	Continue
    )
  in
  !r

(* One can lazily compare the elements of two iterators. *)

val equal_iterators [a, post1 : perm, post2 : perm] (
  eq: (a, a) -> bool,
  consumes i1: iterator a post1,
  consumes i2: iterator a post2
) : (bool | post1 * post2) =

  (* An unpleasant aspect is that, once we have determined that
     the two streams are not equal, we must stop the iterator(s)
     that are not yet finished, in order to obtain the permissions
     [post1] and [post2]. And, after stopping them by invoking
     [next Stop], we must observe that they have indeed finished,
     by matching them against [IFinished]. This is because the
     type-checker does not know that a [Stop] request effectively
     causes the iteration to finish. *)

  (* In order to do this without duplicating too much code, when
     we observe a mismatch, we stop the iterator(s) that need to
     be stopped and pretend that we continue iterating, but set
     [ok] to [False]. Thus, the next call to [loop] finds two
     [IFinished] iterators and returns [ok], that is, [False]. *)
     
  let rec loop (
    ok: bool,
    consumes i1: iterator a post1,
    consumes i2: iterator a post2
  ) : (bool | post1 * post2) =
    match i1, i2 with
    | IFinished, IFinished ->
        ok
    | IAvailable, IAvailable ->
        let x1, next1 = i1.content.content
        and x2, next2 = i2.content.content in
        if eq (x1, x2) then
  	  loop (ok, next1 Continue, next2 Continue)
        else
	  loop (False, next1 Stop, next2 Stop)
    | IAvailable, IFinished ->
        let x1, next1 = i1.content.content in
	loop (False, next1 Stop, i2)
    | IFinished, IAvailable ->
        let x2, next2 = i2.content.content in
        loop (False, i1, next2 Stop)
    end
  in
  
  loop (True, i1, i2)

(*
Local Variables:
compile-command: "../mezzo cps-old.mz"
End:
*)
