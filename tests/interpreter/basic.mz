val x = 0
val y = x + 1
val () =
  print x;
  print y

data pair a b =
  Pair { left: a; right: b }

val t = Pair { left = 0; right = True }
val u = Pair { left = t; right = t }
val v = (u, u)
val w = (v, v)
val x = (w, w)
val () =
  print t;
  print u;
  print v;
  print w;
  print x

mutable data pool a = P adopts cell a
mutable data cell a = Cell { contents: a }

val f () : bool =
  True

val f () : () =
  let c = Cell { contents = 3 } in
  let p = P in
  (* oh! *)
  match f() with False -> () end

val () =
  f()
