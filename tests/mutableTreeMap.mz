open Pervasives

mutable data tree k a =
  | Empty
  | Node { left: tree k a; key: k; value: a; right: tree k a; height: int }

val max (x: int, y: int) : int =
  if x >= y then x else y

val height [k, a] (t: tree k a) : int =
  match t with
  | Empty -> 0
  | Node  -> t.height
  end

(* TEMPORARY [create] is possibly unused? *)
val create [k, a] (consumes (l: tree k a, x: k, d: a, r: tree k a)) : tree k a =
  Node {
    left = l;
    key = x;
    value = d;
    right = r;
    height = max (height l, height r) + 1
  }

val singleton [k, a] (consumes (x: k, d: a)) : tree k a =
  create (Empty, x, d, Empty)

val update_height [k, a] (t: Node { left: tree k a; key: k; value: a; right: tree k a; height: int }) : () =
  t.height <- max (height t.left, height t.right) + 1

val bal [k, a] (consumes t: Node { left: tree k a; key: k; value: a; right: tree k a; height: int }) : tree k a =

  (* Extract the two sub-trees and their heights. *)
  let Node { left = l; right = r } = t in
  let hl = height l
  and hr = height r in

  (* Determine whether the tree is unbalanced and needs to be repaired. *)

  (* Situation 1: the left sub-tree is too big. *)
  if hl > hr + 2 then match l with
  | Empty -> fail (* impossible! *)
  | Node { left = ll; right = lr } ->
      if height ll >= height lr then begin
	(* The left node becomes the root node. *)
	(* The root node becomes the right child. *)
	t.left <- lr;
	update_height t;
	l.right <- t;
	update_height l;
	l
      end
      else match lr with
      | Empty -> fail (* impossible! *)
      | Node { left = lrl; right = lrr } ->
	  (* The node [lr] becomes the root node. *)
	  (* The root node becomes the right child. *)
	  (* The left node remains the left child. *)
	  l.right <- lrl;
	  update_height l;
	  t.left <- lrr;
	  update_height t;
	  lr.left <- l;
	  lr.right <- t;
	  update_height lr;
	  lr
      end
  end

  (* Situation 2: the right sub-tree is too big. *)
  else if hr > hl + 2 then match r with
  | Empty -> fail (* impossible! *)
  | Node { left = rl; right = rr } ->
      if height rr >= height rl then begin
	(* The right node becomes the root node. *)
        (* The root node becomes the left child. *)
	t.right <- rl;
	update_height t;
	r.left <- t;
	update_height r;
	r
      end
      else match rl with
      | Empty -> fail (* impossible! *)
      | Node { left = rll; right = rlr } ->
	  (* The node [rl] becomes the root node. *)
	  (* The root node becomes the left child. *)
	  (* The right node remains the right child. *)
          t.right <- rll;
	  update_height t;
	  r.left <- rlr;
	  update_height r;
	  rl.left <- t;
	  rl.right <- r;
	  update_height rl;
	  rl
      end
  end

  (* Last situation: the tree is not unbalanced. *)
  (* Just update its height field. [t] remains the root. *)
  else begin
    t.height <- max (hl, hr) + 1;
    t
  end

val make [k, a] () : tree k a =
  Empty

val is_empty [k, a] (t : tree k a) : bool =
  match t with
  | Empty -> True
  | Node  -> False
  end

val rec add [k, a] (cmp: (k, k) -> int, consumes x: k, consumes d: a, consumes t: tree k a) : tree k a =
  match t with
  | Empty ->
      (* Here, we could possibly re-use this [Empty] node instead of
	 creating two new ones. *)
      singleton (x, d)
  | Node ->
      let c = cmp (x, t.key) in
      if c = 0 then begin
	(* The key already exists; overwrite the previous data *)
	t.value <- d;
	t
      end
      else if c < 0 then begin
	t.left <- add (cmp, x, d, t.left);
	bal t
      end
      else begin
	t.right <- add (cmp, x, d, t.right);
	bal t
      end
  end

(* It seems that the function [find] must require [duplicable a].
   Indeed, without this hypothesis, we would be forced to consume
   the argument tree [t], which does not seem reasonable. *)

val rec find [k, a] duplicable a => (cmp: (k, k) -> int, x: k, t: tree k a) : option a =
  match t with
  | Empty ->
      none
  | Node ->
      let c = cmp (x, t.key) in
      if c = 0 then some t.value
      (* It is interesting to note that we cannot write the more compact code:
	 find (cmp, x, (if c < 0 then t.left else t.right))
	 Indeed, the type-checker is unable to figure out the desired type of
	 the conditional sub-expression; it reports a resource allocation
	 conflict. In fact, if we wanted to explicitly declare this type,
	 I believe that we would need a magic wand: this sub-expression
	 produces a result [s] together with the permissions [s @ tree k a]
	 and [s @ tree k a -* t @ tree k a]. *)
      else if c < 0 then find (cmp, x, t.left)
      else find (cmp, x, t.right)
  end

(* The above [find] function requires [a] to be duplicable. Another approach
   is to parameterize [find] with a [copy] function that is able to copy an
   element of type [a]. In fact, the [copy] function need not have type [a -> a].
   Several generalizations are possible. First, we can allow [copy] to have type
   [a -> b], which means that the function is not constrained to just copy the
   data, but can use it in an arbitrary manner to produce data of type [b]. For
   this reason, the client-provided function will be called [use], rather than
   [copy]. Second, the function [use] can have type [(consumes a) -> (a, b)],
   which means that in addition to producing some output of type [b], the client
   can also request that the map be updated with a new value of type [a]
   at this key. Last, the function [use] can be allowed to have an arbitrary
   side effect at some permission [p]. This leads us to the following function,
   [find_use_update], a generalization of [find]. *)

val rec find_use_update
  [k, a, b, p :: PERM]
  (cmp: (k, k) -> int, 
   use: (consumes a | p) -> (a, b),
   x: k, t: tree k a | p) : option b =
  match t with
  | Empty ->
      none
  | Node ->
      let c = cmp (x, t.key) in
      if c = 0 then begin
	let (new_value, output) = use t.value in
	t.value <- new_value;
	some output
      end
      else if c < 0 then find_use_update (cmp, use, x, t.left)
      else find_use_update (cmp, use, x, t.right)
  end

(*

    
    let rec mem x = function
        Empty ->
          false
      | Node(l, v, d, r, _) ->
          let c = Ord.compare x v in
          c = 0 || mem x (if c < 0 then l else r)

    let rec min_binding = function
        Empty -> raise Not_found
      | Node(Empty, x, d, r, _) -> (x, d)
      | Node(l, x, d, r, _) -> min_binding l

    let rec max_binding = function
        Empty -> raise Not_found
      | Node(l, x, d, Empty, _) -> (x, d)
      | Node(l, x, d, r, _) -> max_binding r

    let rec remove_min_binding = function
        Empty -> invalid_arg "Map.remove_min_elt"
      | Node(Empty, x, d, r, _) -> r
      | Node(l, x, d, r, _) -> bal (remove_min_binding l) x d r

    let merge t1 t2 =
      match (t1, t2) with
        (Empty, t) -> t
      | (t, Empty) -> t
      | (_, _) ->
          let (x, d) = min_binding t2 in
          bal t1 x d (remove_min_binding t2)

    let rec remove x = function
        Empty ->
          Empty
      | Node(l, v, d, r, h) ->
          let c = Ord.compare x v in
          if c = 0 then
            merge l r
          else if c < 0 then
            bal (remove x l) v d r
          else
            bal l v d (remove x r)

    let rec iter f = function
        Empty -> ()
      | Node(l, v, d, r, _) ->
          iter f l; f v d; iter f r

    let rec map f = function
        Empty ->
          Empty
      | Node(l, v, d, r, h) ->
          let l' = map f l in
          let d' = f d in
          let r' = map f r in
          Node(l', v, d', r', h)

    let rec mapi f = function
        Empty ->
          Empty
      | Node(l, v, d, r, h) ->
          let l' = mapi f l in
          let d' = f v d in
          let r' = mapi f r in
          Node(l', v, d', r', h)

    let rec fold f m accu =
      match m with
        Empty -> accu
      | Node(l, v, d, r, _) ->
          fold f r (f v d (fold f l accu))

    let rec for_all p = function
        Empty -> true
      | Node(l, v, d, r, _) -> p v d && for_all p l && for_all p r

    let rec exists p = function
        Empty -> false
      | Node(l, v, d, r, _) -> p v d || exists p l || exists p r

    (* Beware: those two functions assume that the added k is *strictly*
       smaller (or bigger) than all the present keys in the tree; it
       does not test for equality with the current min (or max) key.

       Indeed, they are only used during the "join" operation which
       respects this precondition.
    *)

    let rec add_min_binding k v = function
      | Empty -> singleton k v
      | Node (l, x, d, r, h) ->
        bal (add_min_binding k v l) x d r

    let rec add_max_binding k v = function
      | Empty -> singleton k v
      | Node (l, x, d, r, h) ->
        bal l x d (add_max_binding k v r)

    (* Same as create and bal, but no assumptions are made on the
       relative heights of l and r. *)

    let rec join l v d r =
      match (l, r) with
        (Empty, _) -> add_min_binding v d r
      | (_, Empty) -> add_max_binding v d l
      | (Node(ll, lv, ld, lr, lh), Node(rl, rv, rd, rr, rh)) ->
          if lh > rh + 2 then bal ll lv ld (join lr v d r) else
          if rh > lh + 2 then bal (join l v d rl) rv rd rr else
          create l v d r

    (* Merge two trees l and r into one.
       All elements of l must precede the elements of r.
       No assumption on the heights of l and r. *)

    let concat t1 t2 =
      match (t1, t2) with
        (Empty, t) -> t
      | (t, Empty) -> t
      | (_, _) ->
          let (x, d) = min_binding t2 in
          join t1 x d (remove_min_binding t2)

    let concat_or_join t1 v d t2 =
      match d with
      | Some d -> join t1 v d t2
      | None -> concat t1 t2

    let rec split x = function
        Empty ->
          (Empty, None, Empty)
      | Node(l, v, d, r, _) ->
          let c = Ord.compare x v in
          if c = 0 then (l, Some d, r)
          else if c < 0 then
            let (ll, pres, rl) = split x l in (ll, pres, join rl v d r)
          else
            let (lr, pres, rr) = split x r in (join l v d lr, pres, rr)

    let rec merge f s1 s2 =
      match (s1, s2) with
        (Empty, Empty) -> Empty
      | (Node (l1, v1, d1, r1, h1), _) when h1 >= height s2 ->
          let (l2, d2, r2) = split v1 s2 in
          concat_or_join (merge f l1 l2) v1 (f v1 (Some d1) d2) (merge f r1 r2)
      | (_, Node (l2, v2, d2, r2, h2)) ->
          let (l1, d1, r1) = split v2 s1 in
          concat_or_join (merge f l1 l2) v2 (f v2 d1 (Some d2)) (merge f r1 r2)
      | _ ->
          assert false

    let rec filter p = function
        Empty -> Empty
      | Node(l, v, d, r, _) ->
          (* call [p] in the expected left-to-right order *)
          let l' = filter p l in
          let pvd = p v d in
          let r' = filter p r in
          if pvd then join l' v d r' else concat l' r'

    let rec partition p = function
        Empty -> (Empty, Empty)
      | Node(l, v, d, r, _) ->
          (* call [p] in the expected left-to-right order *)
          let (lt, lf) = partition p l in
          let pvd = p v d in
          let (rt, rf) = partition p r in
          if pvd
          then (join lt v d rt, concat lf rf)
          else (concat lt rt, join lf v d rf)

    type 'a enumeration = End | More of key * 'a * 'a t * 'a enumeration

    let rec cons_enum m e =
      match m with
        Empty -> e
      | Node(l, v, d, r, _) -> cons_enum l (More(v, d, r, e))

    let compare cmp m1 m2 =
      let rec compare_aux e1 e2 =
          match (e1, e2) with
          (End, End) -> 0
        | (End, _)  -> -1
        | (_, End) -> 1
        | (More(v1, d1, r1, e1), More(v2, d2, r2, e2)) ->
            let c = Ord.compare v1 v2 in
            if c <> 0 then c else
            let c = cmp d1 d2 in
            if c <> 0 then c else
            compare_aux (cons_enum r1 e1) (cons_enum r2 e2)
      in compare_aux (cons_enum m1 End) (cons_enum m2 End)

    let equal cmp m1 m2 =
      let rec equal_aux e1 e2 =
          match (e1, e2) with
          (End, End) -> true
        | (End, _)  -> false
        | (_, End) -> false
        | (More(v1, d1, r1, e1), More(v2, d2, r2, e2)) ->
            Ord.compare v1 v2 = 0 && cmp d1 d2 &&
            equal_aux (cons_enum r1 e1) (cons_enum r2 e2)
      in equal_aux (cons_enum m1 End) (cons_enum m2 End)

    let rec cardinal = function
        Empty -> 0
      | Node(l, _, _, r, _) -> cardinal l + 1 + cardinal r

    let rec bindings_aux accu = function
        Empty -> accu
      | Node(l, v, d, r, _) -> bindings_aux ((v, d) :: bindings_aux accu r) l

    let bindings s =
      bindings_aux [] s

    let choose = min_binding

*)

