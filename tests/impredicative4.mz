(* This example is actually meant to type-check: it's just a manifestation of
   covariance / contravariance that isn't obvious, since it only makes sense
   when looking at the internal representation. Here's the explanation:
    - "id" has type (ML-style) "a -> ((a * b) -> a) -> a"
    - the third occurrence of "a" (this one :   ^^^) is contravariant
    - in Mezzo-style, a contains, amongst other stuff, a nifty set of
    permissions called (look below) "/d1 @ α ∗ /d2 @ β"
    - "/d1 @ α ∗ /d2 @ β" ≤ "/d1 @ α"
    - since it's contravariant, this means we can pass a function to [id] that
    returns less permissions than expected,
    - this is precisely what the consumes keyword entails.

   Let's move on to [impredicative5.mz] that shows the exact opposite case
   failing!
*)

mutable data foo = Foo

val fst [a, b] (consumes y: a, b): a = y

val id [α] (x: α): ((f: [β] (α, β) -> α) | x @ α) -> α =
  fun (f: [β] ((α, β) -> α) | x @ α): α =
    f [int] (x, 2)

val test1 = id [foo] Foo
val test2 = fst [foo]

val test3 = test1 test2

(*

Internal representation for "id":

[α, x :: term]
  (=x | x @ α) -> (
    [f :: term] (=f | f @
      [β, /d1 :: term, /d2 :: term, /r2 :: term]
        (=/r2 | /r2 @ (=/d1, =/d2) ∗ /d1 @ α ∗ /d2 @ β) ->
        (α | /d1 @ α ∗ /d2 @ β)
      ∗ x @ α) -> (α | x @ α)
  | x @ α)


Internal representation for "test1":

[f :: term] (=f | x @ foo ∗ f @
  [β, /d1 :: term, /d2 :: term, /r2 :: term]
    (=/r2 | /r2 @ (=/d1, =/d2) ∗ /d1 @ foo ∗ /d2 @ β) ->
    (foo | /d1 @ foo ∗ /d2 @ β))
  -> (foo | x @ foo)


Internal representation for "test2":

[b, /d1 :: term, /d2 :: term, /r2 :: term]
  (=/r2 | /r2 @ (=/d1, =/d2) ∗ /d2 @ b ∗ /d1 @ foo)
-> (foo | /d2 @ b)

*)
