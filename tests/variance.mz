data list a = Cons { head: a; tail: list a } | Nil

data mutable ref a = Ref { contents: a }

(* If we remove the consumes annotation, this is not contravariant anymore,
 * because this desugars as [x:term] (=x | x@a) -> (int | x@a) an a now appears
 * on both sides of the arrow. *)
data mutable contra a = C { c: (consumes a) -> int }

data bi a = A

data inv a = B { a: a -> a }

data test a b c = D { a: a } | E { b: b }

(* foo should be invariant *)
data mutable adopts_contra a = Foo adopts contra a
