(* The [pack] is a one-shot unit function, encoded by an 
   existential permission. *)
data le_pack =
  | Pack { func: {p: perm} ((consumes (|p)) -> () | p) }

(* Building a [pack] requires consuming a permission. *)
val make_pack [p: perm] ((consumes (|p)) -> () | consumes p): le_pack =
  fail

(* The function [repack] builds a function that opens its argument
   and puts it in a new pack. *)
val repack (consumes f: le_pack): le_pack=
  let h = fun (consumes (x: () | f@le_pack)): ()=
    fail
  in
  (* The type application below is supposed to be the one that is expected. *)
  let y = make_pack (* [(f@le_pack)]*) h in
  fail



(*
(* Composition was the original case, but it is not needed. *)
val compose_pack (consumes f: pack, consumes g: pack): pack=
  let h = fun (consumes x: () | consumes (f @ pack * g @ pack)): ()=
    g.func (f.func x)
  in
  make_pack (*[(f @ pack * g @ pack)]*) h
*)



(*
(* The problem does not appear without a function. *)
data spack =
  | SPack { d: {p: perm} (|p) }

val make_spack [p: perm] (d: () | consumes p): spack =
  SPack {d=d}

val srepack (consumes d: spack): spack=
  make_spack [(d@spack)] d.d
*)
