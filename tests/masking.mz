data list a =
  | Cons { head: a; tail: list a }
  | Nil

val rec length [a] (xs: list a) : int =
  if xs then 1 + length xs.tail else 0

data foo =
  | Cons { head: (); tail: () }
  | Nil

mutable data ref a =
  Ref { contents: a }

val ref_length [a] (r: ref (list a)) : int =
  match r.contents with
  | Cons -> 1
  | Nil  -> 0
  end

(*
BUG we get a really strange error message here:

File "masking.mz", line 17, character 11 - line 18, character 2:
expected a subexpression of type (core::int | r @ ref list a) but it has type core::int

I would have expected a message along the lines of "cannot match the variable r,
whose type is ref (list a), against the data constructor Cons, which belongs to
the type foo"
*)

