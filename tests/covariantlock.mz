(* ------------------------------------------------------------------------------ *)

(* Several types and operations are axiomatized. *)

(* The permission [l @ exact p] is a witness that the lock [l] is held
   and that its invariant is *exactly* [p]. This permission is not
   duplicable. It represents a permission to release the lock and also
   a permission to strengthen the lock's invariant. *)

abstract lock +(p: perm)
fact duplicable (lock p)

abstract exact (p: perm)

val new: [p: perm] (| consumes p) -> lock p =
  builtin __mz_lock_new

val try_acquire: [p: perm] (l: lock p) -> {q : perm} rich_bool empty (p * q * l @ exact (p * q)) =
  builtin __mz_lock_try_acquire

val release: [p: perm] (consumes (l: exact p | p)) -> () =
  builtin __mz_lock_release

val __strengthen: [p : perm, q : perm] (consumes l: exact p) -> (| l @ exact (p * q)) =
  magic::magic ()

val publish: [p : perm] (l: exact p) -> (| l @ lock p) =
  magic::magic ()

(* ------------------------------------------------------------------------------ *)

(* The permission [l @ held p] is a witness that the lock [l] is held
   and that its invariant is *at least* [p]. More precisely, the lock's
   invariant is the form [p * q], for some permission [q], and we hold
   [q]. Thus, giving up [p] is sufficient to release the lock. *)

alias held (p : perm) =
  {q : perm} (exact (p * q) | q)

(* The operations [try_acquire], [release], [strengthen], and [publish],
   as defined above, have types that mention the lock's [exact] invariant.
   We wish to export them with types that mention [held] instead. In all
   cases but one, this conversion is automatically checked by the Mezzo
   type-checker. In the case of [strengthen], though, a type annotation
   appears to be necessary (which in turn requires an eta-expansion). *)

val strengthen [p : perm, q : perm] (consumes l: held p) : (| l @ held (p * q)) =
  __strengthen [q = q] l

(* ------------------------------------------------------------------------------ *)

(* [acquire] can be defined in terms of [try_acquire], by busy waiting.
   This is a not a good implementation, but it is a good test of the
   type-checker. *)

val rec acquire [p: perm] (l: lock p) : (| p * l @ held p) =
  if not (try_acquire l) then
    acquire l

(* ------------------------------------------------------------------------------ *)

(* [borrow] is just an [acquire/release] pair. *)

val borrow [p: perm, q: perm, b] (
  l: lock p,
  f: (| p * consumes q) -> b
| consumes q
) : b =
  acquire l;
  let x = f() in
  release l;
  x

