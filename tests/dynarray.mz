(* Types definitions *)

data mutable dynarray a =
  DArray { r: marray dynamic }
adopts a

data mutable unfinished a =
  Unfinished { r: () }
adopts a

data mutable dummy = Dummy
val dummy : dynamic = Dummy

(* A few basic operations over dynamic arrays *)

(* [create n] creates a new array of [n] elements, which are initialized with a
 * dummy value that the client can't retrieve. *)
val create [a] exclusive a => (
  n: int
) : dynarray a =
  DArray { r = array::create (n, dummy) }

(* [init (n, f)] creates a new dynamic array of [n] elements, where the element
 * at index [i] is initialized with the value [f i]. *)
val init [a, p : perm] exclusive a => (
  s: sense,
  n: int,
  f: (int | p) -> a
  | p
) : dynarray a =
  (* First, create a temporay object that will be our adopter. *)
  let d = Unfinished { r = () } in
  (* Fill the field [d.r] with the array. Don't forget to give the newly-created
   * elements to d! *)
  d.r <- array::init (
    s, n,
      fun (i: int | p * d @ unfinished a) : dynamic =
        let x = f i in
        give x to d; x
  );
  (* Finalize this by chaning the tag of d. *)
  tag of d <- DArray; d

(* [get (d, i)] reads the element at index [i] in the array [d].
 * Although the type a is exclusive, it can only succeeds once because
 * [x] is taken from [d]. *)
val get [a] exclusive a => (
  d: dynarray a,
  i: int
) : a =
  let x = array::get (d.r, i) in
  take x from d; x

(* [set (d, i, v)] sets the element at index [i] in the array [d] to the value
 * [v]. *)
val set [a] exclusive a => (
  d: dynarray a,
  i: int,
  consumes x: a
) : () =
  give x to d;
  array::set (d.r, i, x)

(* [adopt (d, i, v)] gives back [v] to array [d] and performs a runtime check
 * to ensure that [v] is actually the element at index [i]. *)
val adopt [a] exclusive a => (
  d: dynarray a,
  i: int,
  consumes x: a
) : () =
  give x to d;
  let y = array::get (d.r, i) in
  if y != x then
    fail

(* [from_array r] creates a new dynamic array from a given array. *)
val from_array [a] exclusive a => (
  consumes r: marray a
) : dynarray a =
  (* Same trick as above to have a temporary adopter. *)
  let d = Unfinished { r = () } in
  array::transform (Up, r, fun (
    _: int,
    consumes x: a
    | d @ unfinished a
  ) : dynamic = give x to d; x);
  tag of d <- DArray; d.r <- r; d

(* [to_array d] attempts to recover the underlying array. This can fail at
 * runtime if some elements are being borrowed. *)
val to_array [a, m] exclusive a => (
  consumes d: dynarray a
) : array m a =
  array::init (Up, array::length d.r, fun (
    i: int
    | d @ dynarray a
  ) : a = get (d, i))

(* [length d] is the length of the underlying array. *)
val length [a] exclusive a => (
  d: dynarray a
) : int =
  array::length d.r

(* [sort (cmp, d)] sorts in place the dynamic array [d] using [array::sort] *)
val sort [a, p : perm] exclusive a => (
  cmp: (a, a | p) -> int,
  d: dynarray a
  | p
) : () =
  let r = d.r in
  (* The function [cmp] needs an exclusive permission for [d], because
     it needs to give and take objects to and from it, but it cannot
     require [d @ dynarray a], because the ownership of the array has
     been temporarily taken away from [d]. Instead, we use a structural
     permission for [d], which states that the contents of the field [d.r]
     is the value [r]. *)
  let cmp (x: dynamic, y: dynamic | p * d @ DArray { r } adopts a) : int =
    (* An address comparison is required in order to avoid a double take. *)
    if x == y then 0
    else
      taking x from d begin
        taking y from d begin
          cmp (x, y)
        end
      end
  in
  array::sort (cmp, r)

(*
Local Variables:
compile-command: "../mezzo dynarray.mz"
End:
*)
