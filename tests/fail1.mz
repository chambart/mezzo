open core
data bool = True | False
data list a = Cons { head: a; tail: list a } | Nil
data option a = Some { contents: a } | None

(* This fails because we need [duplicable a] as a hypothesis. *)
val find [a] (l: list a, f: a -> bool): option a =
  let rec find1 (l: list a): option a =
    match l with
    | Cons { head; tail } ->
        if f head then
          Some { contents = head }
        else
          find1 tail
    | Nil ->
        None
    end
  in
  find1 l
