val rec length [a] (x: list a): int =
  match x with
  | Nil ->
      0
  | Cons { tail = tail } ->
      1 + length tail
  end

val wrong =
  let r = Ref { contents = Nil } in
  fun [a] (x: a): () =
    r.contents <- Cons { head = a; tail = r.contents }

(* Various tests to make sure I didn't mess up with the bindings. *)

(* val rec (x,y) = (z,t)
and (z,t) = (x, y);;

val (x, y) = (x, y);;

val (x, y) = (y,x,x) and (z,t) = (t, z);;*)
