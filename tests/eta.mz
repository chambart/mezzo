open list

(* This is a slightly simplified version of a problem that I found in cps.mz *)

val consumer [a, q : perm] (
  consumes x: a,
  (| consumes (x @ a * q)) -> ()
| consumes q
) : () =
  ()

val f [a] (consumes xs: list a) : () =

  let j (| consumes xs @ list a) : () =
    ()
  in
  
  match xs with
  | Cons { head } ->

      (* Eta-expansion. *)
      let k1   (| consumes (head @ a * xs @ Cons { head; tail: list a })) : () =
	j()
      in

      (* No eta-expansion. *)
      let k2 : (| consumes (head @ a * xs @ Cons { head; tail: list a })) -> () =
	j
      in

      (* This works. *)
      (* consumer [a, (xs @ Cons { head; tail: list a })] (head, k1); *)

      (* This used to NOT work, and has been fixed! *)
      consumer [a, (xs @ Cons { head; tail: list a })] (head, k2)

  end
