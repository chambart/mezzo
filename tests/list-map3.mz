open pervasives
open list

(* Section 4.1.4 of the tutorial, "List map" *)

val rec map [a1, a2, b, p :: PERM] (
    f: (consumes x: a1 | p) -> (b | x @ a2),
    consumes xs: list a1 | p): (list b | xs @ list a2) =
  match xs with
  | Nil ->
      Nil
  | Cons { head; tail } ->
      let v = f head in
      Cons { head = v; tail = map (f, tail) }
  end

val usage_test: list int =
  let l = cons (1, cons (2, cons (3, nil))) in
  let x = newref 0 in
  let f = fun (y: int | x @ ref int): int =
    x := !x + 1;
    y * y
  in
  let l = map [p = (x @ ref int)] (f, l) in
  l

val usage_test2 =
  (* [make(i, f)] creates a list of [i] elements by calling [f] on [i] *)
  let rec make [a] (i: int, f: int -> a): list a =
    if i = 0 then
      nil
    else
      cons (f i, make (i - 1, f))
  in
  let l = make (10, (fun (x: int): ref int = newref x)) in
  let count = newref 0 in
  (* [f] does something super fancy *)
  let f = fun (consumes y: ref int | count @ ref int):
    (int | y @ ref (int, int)) =
      let v = !y in
      y := (v, v);
      v
  in
  map [ref int, ref (int, int), int, (count @ ref int)] (f, l)
