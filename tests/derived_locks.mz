open channel

(* A lock is implemented as a duplicable channel
   where there is at most one outstanding message. 
   This message carries the permission [p]. *)

alias lock (p: perm) =
  channel (| p)

(* The type [locked] is phantom, i.e., it is
   an abbreviation for a trivial type. It enforces the
   invariant that there is at most one outstanding
   message; but this invariant cannot be stated.
   Note, though, that we could perhaps define
   [locked] as the ownership of a ghost reference
   cell, whose address is ghost-stored within [l].
   This ref cell would store an integer count of
   the number of messages in the channel. When
   there is message in the channel, the message
   would carry the assertion that [r] is one;
   and [l @ locked] would assert that [r] is zero. *)

alias locked =
  (l: =l)

(* One might hope eta-expansion to be unnecessary in the
   definition of [new] and [acquire], yet it is. *)

val new [p: perm] (| consumes p) : lock p =
  new [(| p)] ()

val acquire [p: perm] (l: lock p): (| p * l @ locked) =
  receive [(| p)] l

val release [p: perm] (l: lock p | consumes (p * l @ locked)) : () =
  send [(| p)] (l, ())

