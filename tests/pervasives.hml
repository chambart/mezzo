abstract int :: TYPE
fact duplicable (int)

exclusive data xlist a =
  | XNil
  | XCons { xhead: a; xtail: xlist a }

data list a =
  | Nil
  | Cons { head: a; tail: list a }

exclusive data ref a = Ref {
  contents: a;
}

val cref [a] (consumes x: a): ref a =
  Ref { contents = x }

val rget [a] (consumes x: ref a): (a, permission x: ref unknown) =
  x.contents

val rset [a, b] (consumes x: ref a, consumes c: b): (permission x: ref b) =
  x.contents <- c
