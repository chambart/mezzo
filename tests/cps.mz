open list
open old_iterator

(* ------------------------------------------------------------------------------ *)

(* Higher-order list iteration in CPS style. *)

(* The function [cps_iter] expects a list [xs], a client function [f],
   and two continuations [j] and [k], which are the abort continuation
   and the normal continuation. [cps_iter] invokes at most one of its
   continuations -- this is encoded by quantifying over the permission
   [p], which both continuations require. This quantification over [p]
   also serves as a ``frame rule in CPS style'', as it means that all
   of the permissions that we hold when we call [f] and that [f] itself
   does not need are transmitted to [f]'s continuation. [cps_iter] takes
   away the permission [xs @ list a] and passes it on to [j] or [k]. *)

(* The client function [f] follows the same template. It expects an
   element [x] and two continuations. It invokes at most one of these
   continuations, and passes the ownership of [x] to it. *)

(* A permission [s] is threaded throughout the whole thing, so as to
   allow the client function to have a side effect. *)

(* If we were not afraid of unnecessary boxing and unboxing, we could
   make the types of [f] and [cps_iter] much clearer by packing the
   two continuations together as a ``one-shot choice'' between two
   continuations. *)

(* Perhaps surprisingly, the two continuations can have distinct answer
   types. Actually, we do not directly do anything with the abort continuation
   [j]. It is only carried around and passed to [f]. Its type changes at every
   iteration, though, as it plays the role of a ``magic wand'' that takes us
   back from the ownership of a sub-list to the ownership of the whole
   list. We rely on the fact that the type-checker is able to assign a new
   type to [j] without requiring an explicit eta-expansion. This allows us
   to keep a continuation [j] that costs O(1), as opposed to O(n). *)

val rec cps_iter [a, b, c, s : perm, p : perm] (
  (* The list. *)
  consumes xs: list a,
  (* The client. *)
  f: [q : perm] (
    (* The element. *)
    consumes x: a,
  (* The abort and normal continuations. *)
    (| consumes (x @ a * q * s)) -> b,
    (| consumes (x @ a * q * s)) -> c
  | consumes q
  | consumes s
  ) -> c,
  (* The abort and normal continuations. *)
  j: (| consumes (xs @ list a * p * s)) -> b,
  k: (| consumes (xs @ list a * p * s)) -> c
| consumes p
| consumes s
) : c =
  match xs with
  | Nil ->
      (* The list is empty. We are done. *)
      k()
  | Cons { head } ->
      (* The list is non-empty. We must invoke [f]. *)
      f [ (xs @ Cons { head; tail: list a } * p) ] (
       head,
       j,
       fun (| consumes (xs @ Cons { head: a; tail: list a } * p * s)) : c =
         let tail = xs.tail in
         cps_iter [ p = (xs @ Cons { head: a; tail } * p) ] (tail, f, j, k)
      )
  end

(* TEMPORARY it would be nice if we could get rid of the two type applications
   above. In each case, these type applications intuitively indicate what is
   ``framed out'', i.e. transmitted to the continuations. This is a kind of
   ``frame inference problem'' in CPS style. Here the appropriate behavior might
   be to instantiate the flexible permission variable with ``everything that
   remains''. *)

(* ------------------------------------------------------------------------------ *)

(* We recover a normal (direct-style) higher-order iteration function by
   applying [cps_iter] to a client function that does not capture the
   continuations. *)

val rec normal_iter [a, s : perm] (
  xs: list a,
  f : (a | s) -> bool
| consumes s
) : outcome =

  (* Wrap [f], which is a normal function, to obtain a function in CPS
     style, which invokes a continuation just once at the end. Which
     continuation is invoked depends on the request returned by [f]. *)
  (* This function is in fact polymorphic in its answer type; this is
     a more general type than required by [cps_iter], and reflects the
     fact that [wrapped_f] does not have a control effect. *)
  let wrapped_f [b, q : perm] (
    consumes x: a,
    j: (| consumes (x @ a * q * s)) -> b,
    k: (| consumes (x @ a * q * s)) -> b
  | consumes q
  | consumes s
  ) : b =
    if f x then k() else j()
  in

  (* Define two continuations that construct the final outcome. *)
  let aborted  () : outcome = Stopped
  and finished () : outcome = Done in

  (* Invoke [cps_iter]. Both answer types are instantiated with
     [outcome | xs @ list a]. The permission [p] is instantiated
     with [empty]. *)
  cps_iter
    [a, (outcome | xs @ list a), (outcome | xs @ list a), s]
    (xs,
     wrapped_f [(outcome | xs @ list a)],
     aborted,
     finished)

(* TEMPORARY could we get rid of the type application on [wrapped_f]? *)

(* ------------------------------------------------------------------------------ *)

(* Applying [cps_iter] to [yield] allows constructing an iterator for a list.
   This iterator produces elements of type [a] and, once finished or stopped,
   gives back the ownership of the list. *)

val iterate [a] (
  consumes xs: list a
) : iterator a (xs @ list a) =
  let aborted  () : () = ()
  and finished (| consumes xs @ list a) : iterator a (xs @ list a) =
    IFinished { outcome = Done }
  in
  cps_iter [b = (| xs @ list a), s = empty, p = empty] (
    xs,
    yield,
    aborted,
    finished
  )

(* TEMPORARY could we get rid of the type applications for s and p?
   currently we can remove either of them, but not both. *)

(* Note: the functions [normal_iter] are not specific of lists in any way.
   We could in principle abstract them over [list a] and [cps_iter] in
   order to obtain generic versions of these functions. Do this after the
   API has stabilized... TEMPORARY *)

(*
Local Variables:
compile-command: "../mezzo cps.mz"
End:
*)
