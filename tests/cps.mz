(* An implementation of the delimited (composable) continuation monad. *)

(* We manipulate computations of type (a -> b) -> c, where:

   a :          result type; the continuation's argument type
   b : internal answer type; the continuation's return type
   c : external answer type; the computation's return type *)

(* ------------------------------------------------------------------------------ *)

(* Monadic Return. *)

(* Usually, [return] has type [a, b] (x : a) -> (a -> b) -> b. *)

(* It seems that we must restrict [a] to be duplicable, because the value [x]
   is captured by the lambda-abstraction [\k.k x]. The other option would be
   to make this lambda-abstraction a one-shot function (assuming that we have
   one-shot functions). But this would force us to work with computations of
   type (a -> b) -1-> c. Then, in the definition of [bind], we would have to
   guarantee that the application [r x k] takes place at most once, so we
   would have to guarantee that [l] invokes its continuation at most once,
   so would be forced to work with computations of type (a -1-> b) -1-> c.
   Thus, the continuation captured by [shift] would be one-shot. This might
   be sufficient for some applications (e.g., inverting a fold), but I would
   prefer to avoid it. *)

(* Requiring that [a] be duplicable is a strong restriction. We can relax this
   type, however, by threading a permission through our computations. In general,
   we can work with computations of type:

     ((a | consumes post) -> b | consumes pre) -> c
     where a is duplicable
   
   Thus, each the two arrows above expects an argument of duplicable type
   (either a, or (a | consumes post) -> b), but also expects a permission,
   pre or post, which may or may not be duplicable. The permission pre is
   the precondition of the computation; the permission post is the
   precondition of the continuation, hence the internal postcondition
   of the computation. *)

(* I believe that this approach might give us the best of the two worlds:
   one-shot functions when we need them, and multi-shot functions otherwise.
   Indeed, a function that happens to preserve its precondition can be
   invoked multiple times, whereas a function that consumes (or transforms)
   its precondition can be invoked at most once. Thus, for various choices
   of [pre] and [post], we get one-shot or multi-shot functions. *)

(* I am worried, though, that in general we would like the postcondition
   to depend on the result [x], so the type of computations should be:

     ((x: a | consumes post x) -> b | consumes pre) -> c
     where a is duplicable
   
   Because we do not have higher-order quantification, we cannot express
   [bind] for computations of this type. *)

(* AH -- maybe there is no point in describing the argument of the
   continuation as (x: a | consumes post x). Indeed, this amounts to
   splitting the argument type between a duplicable part [x: a] and a
   possibly-non-duplicable part [post x]. Could we instead just write
   (consumes x: a)? NO. In the case of [return], we do need to split
   [a] and [p]. In the case of [bind], we do need to split [a] and
   [middle]. *)

(* In the case of [return], of course, [pre] and [post] must coincide. The
   permission [p] is not required to be duplicable. *)

val return
  [a, b, p : perm]
  duplicable a =>
  (x : a) : ((a | consumes p) -> b | consumes p) -> b =
  fun  (k :  (a | consumes p) -> b | consumes p)  : b =
    k x

(* ------------------------------------------------------------------------------ *)

(* Monadic Bind. *)

(* Although the type annotations make this code unreadable, it is just the
   expected code, with its most general ML type, extended with permissions
   [pre], [middle], and [post], which form a Hoare-like sequencing rule.
   One simplification is that [a1] and [post] always appear together, so
   we can use just [consumes a1] instead of [a1 | consumes post], without
   loss of generality. *)

(* Note that, although [a] is not technically required to be duplicable,
   it will usually be duplicable, since the curried function [r] would
   otherwise not be able to do anything useful with its first arugment. *)

(* We define [bind] as a two-argument function; it does not need to be
   curried. In the [do]-notation, [bind] is applied to two arguments at
   once. This saves us one large type annotation. *)

(* It would be nice if we could uncurry [r] as well, as this would allow us
   to merge [a1] and [middle], but I don't think that is possible. In
   the [do]-notation, the second argument to [bind] is a lambda-abstraction
   of one argument. *)

val bind
  [a, a1, b, b1, c, pre : perm, middle : perm]
  (l : ((a | consumes middle) -> b | consumes pre) -> c,
   r : a -> ((consumes a1) -> b1 | consumes middle) -> b) :
  (k : (consumes a1) -> b1 | consumes pre) -> c
  =
  fun (k : (consumes a1) -> b1 | consumes pre) : c =
    l (fun (x : a | consumes middle) : b =
      r x k
    )

(* ------------------------------------------------------------------------------ *)

(* Reset. *)

(* Here, [reify] is the identity, and [reset c] is implemented by passing an
   identity continuation to the computation [c]. We do not re-package the
   resulting value as a computation (i.e., we do not pass it to [return]),
   because we are in a two-layer world, where the code outside of [reset]
   is not monadic. *)

(* The type of the identity, in Mezzo, is [(consumes a) -> a]. This is
   equivalent, I believe, to [(a | p) -> a], where [a] is required to
   be duplicable. *)

val reset [a, b] (c: ((consumes a) -> a) -> b) : b =
  c (fun (consumes x : a) : a = x)

(* ------------------------------------------------------------------------------ *)

(* Shift. *)

(* Here, [shift] is the identity. When one wishes to capture the current
   continuation, one simply writes [fun (k: a -> b) : c = ...], and
   presto, this is a computation that has access to its continuation. *)

(* ------------------------------------------------------------------------------ *)

(* Higher-order list iteration in CPS style. *)

(* TEMPORARY this code needs to be generalized in order to allow [f]
   to perform a side effect on some state [s]. *)

open list

data request =
  | Stop
  | Continue

data outcome =
  | Stopped
  | Done

val rec cps_iter [a, b, p : perm] (
  (* The permission [xs @ list a] is taken away; it will be passed on to
     the continuation [k]. *)
  consumes xs: list a,
  (* The user-supplied iteratee [f] has access to one list element, [x], at
     type [a], and must return the permission [x @ a] to its own
     continuation. Furthermore, it must be parametric in a permission [q]
     which is passed to [f] and which [f] must pass on to its own
     continuation. (This implies that [f] invokes its continuation at most
     once.) The answer type of [f] is [b], the same as the answer type of
     [cps_iter], because [cps_iter] may or may not call [f]. The function [f]
     passes a request to its continuation, which indicates whether the
     iteration should continue. *)
  f: [q : perm] (
    consumes x: a,
    (request | consumes (x @ a * q)) -> b
  | consumes q
  ) -> b,
  (* The continuation [k] receives the final outcome of [cps_iter]. It
     indicates whether the iteration went all the way to the end of the list,
     or was prematurely stopped. Furthermore, [k] recovers the ownership of
     the list [xs]. Finally, [cps_iter] is parametric in a permission [p],
     which [cps_iter] consumes and passes on to its continuation [k]. *)
  k: (outcome | consumes (p * xs @ list a)) -> b
| consumes p
) : b =
  match xs with
  | Nil ->
      (* The list is empty. We are done. Easy! *)
      k Done
  | Cons { head } ->
      (* The list is non-empty. The first thing to do is to call [f].
	 All of our permissions are transmitted to [f]. Indeed, the
	 permission [head @ a] is explicitly requested by [f], and
	 our other permissions collectively become the parameter [q]
	 that [f] passes on to its continuation. *)
      f
	[ q = (xs @ Cons { head; tail: list a } * p) ] (* optional annotation! *)
	(head,
	fun (r : request | consumes (head @ a * xs @ Cons { head; tail: list a } * p)) : b =
	  (* We are now in the continuation of [f]. Our permissions
	     have been passed back to us, so we are still in good
	     shape. *)
	  match r with
	  | Stop ->
	      (* The request produced by [f] is [Stop]. Easy. We are
		 able to reconstruct [xs @ list a], which [k] requires. *)
	      k Stopped
	  | Continue ->
	      (* The request produced by [f] is [Continue]. This is
		 the trickier case. The code is simple: it is just
		 a recursive call. The trick is in understanding the
		 permissions that will be passed to [k]. Officially,
		 [k] requires [p] and [xs @ list a]. It will receive
		 [p * xs @ Cons { head: a; tail }] and [tail @ list a].
		 Up to a recombination, these are the same, so the call
		 is well-typed. *)
	      let tail = xs.tail in
  	      cps_iter [ p = (p * xs @ Cons { head: a; tail }) ] (tail, f, k)
	  end
	)
  end

(* Now, suppose [f] does not need to capture its continuation. We wrap the
   call to [f] within a monadic [return], and we recover a normal [iter]
   function. *)

val rec normal_iter [a] (
  xs: list a,
  f : a -> request
) : outcome =

  (* Wrap [f], which is a normal function, to obtain a function in CPS
     style, which invokes its continuation [k] just once at the end.
     This function is in fact polymorphic in its answer type; this is
     a more general type than required by [cps_iter], and reflects the
     fact that [wrapped_f] does not have a control effect. *)
  let wrapped_f [b, q : perm] (
    consumes x: a,
    k: (request | consumes (x @ a * q)) -> b
  | consumes q
  ) : b =
    k (f x)
  in

  (* Define an identity continuation. This amounts to enclosing the
     call to [cps_iter] within a [reset]. This continuation will be
     invoked at the very end of the iteration, and will have access
     (again) to the entire list [xs @ list a]. *)
  let id (b : outcome | xs @ list a) : outcome =
    b
  in

  (* Invoke [cps_iter]. The type [b] is instantiated with [outcome | xs @ list a].
     The permission [p] is instantiated with [empty]. *)
  cps_iter (xs, wrapped_f, id)

(* Now, let's try to invert [cps_iter] and obtain an iterator. *)

(* A iterator is either finished, or a pair of an element and a
   captured continuation that expects precisely this element,
   and which (when invoked) produces another iterator. (Thus,
   the type iterator is recursive. It is a type of streams.) *)

(* A difficulty is that the captured continuation expects a
   certain permission, which corresponds to [q] in the type
   of [cps_iter]. We must store a pair of the continuation
   and the permission [q] that it requires -- this is
   exactly the encoding of one-shot functions. It requires
   an existential quantification over [q]. (An attempt to
   parameterize the type [iterator] over [q] would fail,
   as we would not know which parameter to supply in the
   recursive occurrence of [iterator].) *)

(* In a sense, the existential quantification over [q] serves
   exactly to hide the type ``segment of a data structure'',
   which we do not wish to explicitly express. *)

(* TEMPORARY
data iterator a =
    IFinished
  | IAvailable { content:
		   [some pre: perm] (
		     head: a,
		     k: (request | consumes (head @ a * pre)) -> iterator a
		     | pre
		   )
	       }

val yield [a, q : perm] (
  consumes x : a,
  k: (request | consumes (x @ a * q)) -> iterator a
  | consumes q
) : iterator a =
  (* We capture the continuation [k] and store it.
     There is an implicit [shift]. *)
  Succ { content = (x, k) }
*)
(*
Local Variables:
compile-command: "../mezzo cps.mz"
End:
*)
