data mutable xlist a =
  | XCons { head: a; tail: xlist a }
  | XNil

(* The universal quantification on [p] builds in a frame rule. It also
   guarantees that [cps_mappend] will invoke its continuation at most
   once. *)

val rec cps_mappend [a, b, p : perm] (
  consumes x: xlist a,
  consumes y: xlist a,
  k: (consumes xlist a | consumes p) -> b
  | consumes p
) : b =
  match x with
  | XNil ->
      k y
  | XCons ->
      (* Na√Øve: every [XCons] cell of the list [x] will be assigned. *)
      let f (consumes z : xlist a | consumes (x @ XCons { head: a; tail: unknown } * p)) : b =
        x.tail <- z;
       k x
      in 
      cps_mappend (x.tail, y, f)
  end

val mappend [a] (
  consumes xs: xlist a,
  consumes ys: xlist a
) : xlist a =
  cps_mappend (xs, ys, fun (consumes zs: xlist a) : xlist a = zs)

