data list a = Cons { head: a; tail: list a } | Nil

val rec map [a, b] (f: (consumes x: a) -> b, consumes xs: list a): list b =
  match xs with
  | Nil ->
      Nil
  | Cons { head; tail } ->
      Cons { head = f head; tail = map (f, tail) }
  end

