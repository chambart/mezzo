
(* Idéalement, on aimerait:
    val make_counter (): ∃(t:★). (r: t, get: (| r @ t) -> int) =
  pour avoir un minimum d'abstraction.
*)
val make_counter (): (r: ref int, get: (| r @ ref int) -> int) =
  let r = Ref { contents = 0 } in
  let f = fun (| r @ ref int): int =
    let v = r.contents in
    r.contents <- v + 1;
    v
  in
  (r, f)

val test =
  (* Ce qui est intéressant c'est qu'il n'est pas nécessaire de passer [r] à [f]
   * lors de l'appel, la permission est inférée automatiquement. *)
  let (r, f) = make_counter () in
  let v = f () in
  v + v

