open core
data list a =
  | Cons { head: a; tail: list a }
  | Nil

mutable data cell a =
  | Cell { head: a; tail: () }

val rec concat1 [a] (
   consumes dst: cell a,
   consumes xs: list a,
   consumes ys: list a): (| dst @ list a)
  =
  match explain xs with
  | Nil ->
      dst.tail <- ys;
      tag of dst <- Cons
  | Cons { head; tail } ->
      let dst' = Cell {
        head = head; tail = ()
      } in
      dst.tail <- dst';
      tag of dst <- Cons;
      concat1 (dst', tail, ys)
  end

val concat [a] (
   consumes xs: list a,
   consumes ys: list a): list a
  =
  match xs with
  | Nil ->
      ys
  | Cons { head; tail } ->
      let dst = Cell {
        head = head; tail = ()
      } in
      concat1 (dst, tail, ys);
      dst
  end
