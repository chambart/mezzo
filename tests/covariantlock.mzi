(* This file offers an experimental version of the lock API, where
   locks are monotonic (their invariant grows stronger with time)
   and covariant (so a client knows only part of the invariant). *)

(* A lock protects a permission [p], which usually is not duplicable. *)

(* In this elaborate variant of the lock API, the type [lock] is viewed
   as covariant. This means that [p] need not represent everything that
   the lock protects, but can represent only part of it. *)

abstract lock +(p: perm)

(* A lock is duplicable: multiple threads may simultaneously attempt
   to acquire it. Note that, because the type [lock] is covariant, it
   is possible for a single lock to be known under several types, such
   as [lock p] and [lock q], where [p] and [q] are entirely unrelated. *)

fact duplicable (lock p)

(* The permission [l @ held p] is a witness that the lock [l] is held
   and that its invariant is (at least) [p]. This can be viewed as a
   permission to release the lock (by giving up the permission [p])
   and a permission to strengthen the lock's invariant. *)

abstract held (p: perm)

(* Creation. *)

(* An invariant [p] is chosen at creation time. Note that we could let
   the initial invariant be [empty], and strengthen it later on. For
   compatibility with the basic lock API, though, it is better to pick
   a non-trivial initial invariant. *)

val new: [p: perm] (| consumes p) -> lock p

(* Acquisition. *)

val acquire:     [p: perm] (l: lock p) -> (              | p * l @ held p)
val try_acquire: [p: perm] (l: lock p) -> rich_bool empty (p * l @ held p)

(* Release. *)

val release: [p: perm] (consumes (l: held p | p)) -> ()

(* A well-balanced acquire/release pair. *)

val borrow: [p: perm, q: perm, b] (
  l: lock p,
  f: (| p * consumes q) -> b
| consumes q
) -> b

(* Strengthening. *)

(* When the lock is held, its invariant can be strengthened. This
   operation has no runtime effect. *)

val strengthen: [p : perm, q : perm] (consumes l: held p) -> (| l @ held (p * q))

(* A lock that is held is also a lock. This is a conversion between
   permissions, which has no runtime effect. This operation can be
   used, for instance, when one wishes to publish a strengthened
   invariant. *)

val publish:    [p : perm] (l: held p) -> (| l @ lock p)

