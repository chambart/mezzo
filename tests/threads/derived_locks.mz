open channels

(*
data lock (p: perm) =
  | Lock { dummy: unknown; chan: channel ( =dummy | p ) | dummy @ ref () }
*)

data lock (p: perm) =
  | Lock { dummy: unknown; chan: channel ( ref () | p ) }

(*
abstract held (l: term): perm
fact exclusive (held l)
*)

val new_lock [p: perm] ( | consumes p): lock p =
  let c = new_channel [ ( ref () | p ) ] () in
  let r = Ref { contents = () } in
  send [ ( ref () | p ) ] (c,r);
  Lock { dummy = r; chan = c }

(*
val acquire [p: perm]
  (l: Lock { dummy: unknown; chan: channel ( ref () | p ) } ):
  ( | p  * p.dummy @ ref () ) =
  match l with
  | Lock { dummy; chan } -> 
    receive [ ( ref () | p ) ] chan
  end
*)

val release [p: perm] (l: Lock { dummy: (dummy: unknown); chan: channel (ref () | p) } | consumes (p * dummy @ ref ()) ): () =
  match l with
  | Lock { dummy; chan } ->
(*    let r = Ref {contents = ()} in*)
    send [ ( ref () | p ) ] (chan, dummy)
  end

(*
(* Adoption/Abandon version, fails because the adopts clause is restricted to 
   mutable structures. *)
data lock (p: perm) =
  | Lock { dummy: dynamic; chan: channel ( | p) }
adopts ref ()
*)

(*
(* Cyclic version with a dummy reference. *)      
data lock (p: perm) =
  | Lock { held: unknown; chan: channel ( | held @ ref () * p) }
*)

(*
(* Cyclic version *)

open channels

abstract held (l: term): perm
fact exclusive (held l)

(* A cycle is to be added on held l here. *)
data lock (p: perm) =
  | Lock { chan: channel ( | p) }

val new_lock [p: perm] ( | consumes p): lock p =
  let c = new_channel [ ( | p) ] () in
  Lock { chan = c }

val acquire [p: perm] (l: lock (p * held l)): ( | p * held l) =
  match l with
  | Lock { chan } -> 
    receive [ ( | p * held l) ] chan
  end

val release [p: perm] ( l: lock (p * held l) | consumes (p * held l) ): () =
  match l with
  | Lock { chan } -> send [ ( | p * held l) ] (chan,())
  end
      
*)
