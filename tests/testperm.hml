(* Testing our various abstract type declarations. *)

abstract int :: TYPE
fact duplicable (int)

abstract ref (a :: TYPE) :: TYPE
fact exclusive (ref a)

abstract list (a :: TYPE) :: TYPE
fact duplicable (a) => duplicable (list a)

abstract foobar (a :: TYPE) (b :: TYPE) (c :: TYPE) :: TYPE
fact duplicable (c) => duplicable (foobar a b c)

(* Test: adding a permission x: t Î± should result in it being expanded at once.
 * *)
data t1 a =
  | Foo { bar: a }

(* Test: adding x: t2 Î± then x: Bar { baz: Î² } should fusion the two
 * permissions. *)
data t2 a =
  | Foo
  | Bar { baz: t1 a }

(* Test: apply length to x: list b and see how it works. *)
data listops =
  ListOps {
    length: [a] list a -> int;
    concat: [a] (consumes l1: list a, consumes l2: list a) -> (l3: list a)
  }
 
