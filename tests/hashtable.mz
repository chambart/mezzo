(* TEMPORARY the array should have duplicable elements! this will lead us
   to requesting that the hash table have duplicable elements as well!
   (and to immutable buckets)
   or should the table adopt the buckets?
*)

(* TEMPORARY mutable? *) data bucket k a =
  | Nil
  | Cons { key: k; value: a; tail: bucket k a }

mutable data table k a =
  Table {
    (* The table's initial array size. *)
    initial_size: int;
    (* The table's current number of elements. *)
    size: int;
    (* The bucket array. *)
    buckets: array::array (bucket k a)
  }

val rec power_2_above (x: int, n: int) : int =
  if x >= n then x
  else if x * 2 > array::max_length then x
  else power_2_above (x * 2, n)

val create [k, a] (initial_size: int) : table k a =
  let initial_size = power_2_above (16, initial_size) in
  Table {
    initial_size = initial_size;
    size = 0;
    buckets = array::create [bucket k a] (initial_size, Nil)
      (* The type application is required because the type-checker does
	 not know (for the moment, at least) that array is covariant. *)
  }

val clear [k, a] (t: table k a) : () =
  t.size <- 0;
  let buckets = t.buckets in
  let clear (i: int | buckets @ array::array (bucket k a)) : () =
    array::set (buckets, i, Nil)
  in
  arrayops::iter_array (clear, buckets)
