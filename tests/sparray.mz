(* An attempt at semi-persistent arrays, using one-shot functions
   to encode the "arrow" permissions associated to rollback. *)
(* The current implementation is as close as possible to FranÃ§ois's
   example. *)

open oneshotfunction

(* A semi-persistent array is a "representation" that is either a pointer
   to an ordinary array or a diff associated to a pointer to a more recent
   semi-persistent array. *)

data mutable sparray a =
  | SPArray { repr: repr a }

and mutable repr a =
  | RFlat { contents: array a }
  | RUndo { descendant: sparray a; offset: int; element: a }

(*
data mutable sparray a =
  | SPCurrent { contents: array a }
  | SPOld { contents: unknown; next: unknown; back: ( | consumes (next @ array a) ) -> ( | contents @ array a) }
*)

(* Creation. *)

(* The function [create] fills a semi-persistent array with the provided
   initial value, which has to be duplicable. *)

val create [a] duplicable a => (size: int, element: a): sparray a =
  SPArray {
    repr = RFlat {
      contents = array::create (size, element)
    }
  }

(* Turning an array into a semi-persistent array. *)

val from_array [a] (consumes t: array a): sparray a =
  SPArray { repr = RFlat { contents = t } }

(* The function [reroot] rolls back to an old version of a semi-persistent
   array [spa]. This is done by recursively applying the diffs to the more
   recent versions. The operation returns nothing, but a refined permission
   on [spa] that ensures that [spa] is in flat form. *)
   
val rec reroot [a] (consumes spa: sparray a):
  ( | spa @ SPArray { repr: RFlat { contents: array a } }) =
  match spa.repr with
  | RFlat {} ->
    ()
  | RUndo { descendant; offset; element } ->
    (* Flatten the descendant, which ensures the existence of the field
       [descendant.repr.contents]. *)
    reroot descendant;
    let n = descendant.repr in
    let a = n.contents in
    (* Apply the diff to the obtained contents. *)
    array::set (a, offset, element);
    spa.repr <- n
  end 

(* Get. *)

val get [a] duplicable a => (spa: sparray a, offset: int): a =
  reroot spa;
  array::get (spa.repr.contents, offset)

(* Retrieve the array represented by a semi-persistent array. *)

val to_array [a] (consumes t: sparray a): array a =
  reroot t;
  t.repr.contents

(* Set. *)

(* The function [set] consumes a semi-persistent array [spa]
   and returns two things:
   - an updated semi-persistent array [spa'], and
   - a void one-shot function [back] that allows one to retrieve
     a permission on [spa] by giving up the permission on [spa'].
*)

(* The one-shot function is a record that contains a hidden
   (existentially quantified) permission. This permission concerns
   the root of [spa] as well as the diff between [spa] and [spa'].
   It is used to retrieve [spa] from [spa']. *)

(* The function [retrieve] does nothing but putting two permissions
   together. It will be used to define the one-shot function returned
   by [set]. *)

val retrieve [a, spa: term, spa': term]
  ( consumes ( | (spa' @ sparray a)) | consumes (spa @ SPArray {
      repr: RUndo {
	descendant: =spa'; offset: int; element: a
      } 
    })): ( | spa @ sparray a) =
    ()

val set [a] duplicable a =>
  (consumes spa: sparray a, offset: int, element: a):
  (spa': sparray a,
   back: osf ( | spa' @ sparray a) ( | spa @ sparray a) )
  =
  (* Makes sure we are looking at a flat version. *)
  reroot spa;
  let r = spa.repr in
  let arr = r.contents in
  (* Swap the new value with the old one. *)
  let old_x = array::get(arr, offset) in
  array::set(arr, offset, element);
  (* Build the new semi-persistent array as well as the diff. *)
  let spa' = SPArray { repr = r } in
  spa.repr <- RUndo { descendant = spa'; offset = offset; element = element };
  (* Return the new semi-persistent array and a one-shot function that
     possesses the only permission to access the diff. *)
  spa', (osf_make
	   (* I guess the needed annotation is the third one. *)
	   [ ( | spa' @ sparray a) ]
	   [ ( | spa @ sparray a) ]
	   [ (spa @ SPArray {
	     repr: RUndo {
	       descendant: =spa'; offset: int; element: a
	     } 
	   }) ]
	   (retrieve [a] [spa] [spa']))

(* Swap two elements in a semi-persistent array, and return a one-shot
   function accouting for the two steps of the swap. *)

val swap [a] duplicable a =>
  (consumes spa: sparray a, i: int, j: int):
  (spa': sparray a,
   back: osf ( | spa' @ sparray a) ( | spa @ sparray a) )
  =
  let old_i = get (spa, i) in
  (* Perform the two calls to [set] and bind the corresponding one-shot
     functions. *)
  let spa1, back1 = set (spa, i, get (spa, j)) in
  let spa2, back2 = set (spa1, j, old_i) in
  (* The composition requires the type application. *)
  let back = osf_compose
    [(|spa2 @ sparray a)]
    [(|spa1 @ sparray a)]
    [(|spa @ sparray a)]
    (back2, back1)
  in
  (* Return the final semi-persistent array and the global rollback
     function. *)
  spa2, back

