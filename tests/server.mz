open thread
open channel

(* An advertisement channel is a channel on which the server posts just
   one message and the clients can compete to receive this message. The
   message contains a pair of request/reply outlet/inlet, which are private
   and used only for one client/server interaction. *)

(* We make the reply tube synchronous, just so that we can recover the
   full ownership of it at the end of the interaction. This is
   not essential. *)

alias advertisement a b =
  channel (tube::outlet a, synctube::inlet b)

(* A client can use an advertisement channel as follows. *)

val invoke [a, b] (
  ad: advertisement a b,
  consumes x: a
) : b =
  let request, reply = channel::receive ad in
  tube::send(request, x);
  synctube::receive reply

(* [serve f] spawns a new server thread, which listens on a new
   advertisement channel. It returns this channel, for use by
   client threads. Each reply on the request tube is served
   by applying the function [f] to the request and sending the
   result via the reply tube. Multiple requests can be served
   concurrently. For fun, the function itself has access to the
   advertisement channel, so the server can send requests to
   itself in the process of servicing a request. *)

(* There is no mechanism for terminating the server. *)

(* In principle, instead of allocating new request/reply tubes every
   time, the server could maintain a pool of unused tubes and use
   one of them (if available) or allocate a new one. *)

val serve [a, b] (
  f: (advertisement a b, consumes a) -> b
) : advertisement a b
=
  (* Create the advertisement channel. *)
  let ad : advertisement a b = channel::new() in
  (* Spawn a server thread. *)
  spawn (fun () : () =
    while true do begin
      (* Post a message on the advertisement channel, containing
         a pair of fresh reply/request tubes. *)
      let request = tube::new()
      and reply   = synctube::new() in
      tube::setup [a] request;
      synctube::setup [b] reply;
      channel::send(ad, (request, reply));
      (* Wait for a client to grab this message. We will know
         that this has occurred once we receive a message via
         the [request] tube. *)
      let x = tube::receive request in
      (* Here, we own the inert request tube, and could in principle
         store it in a pool for future re-use. *)
      assert request @ tube::inert;
      (* Spawn a new thread to deal with this request. Note that
         the ownership of [x] is transferred to this new thread. *)
      spawn (fun (| consumes (x @ a * reply @ synctube::outlet b)) : () =
        (* Reply to the client by sending the result of [f] via
           the reply tube. *)
        synctube::send(reply, f(ad, x));
        (* Here, we own the inert reply tube, and could in principle
           store it in a pool for future re-use. *)
        assert reply @ synctube::inert
      )
    end
  );
  (* As soon as everything is set up, return the advertisement channel. *)
  ad

(* Just for fun, a recursive and very inefficient Fibonacci server. *)

val fib (n: int) : int =

  (* Set up a recursive server. *)
  let ad : advertisement int int =
    serve (fun (ad: advertisement int int, n: int) : int =
      if n <= 1 then
        1
      else
        invoke(ad, n-2) + invoke(ad, n-1)
    )
  in

  invoke(ad, n)

(* A variant of [serve], where the server posts several messages in
   advance on the advertisement channel, so as to augment the degree
   of concurrency. The threads that handle the requests are also
   spawned in advance. *)

val serve [a, b] (
  f: (advertisement a b, consumes a) -> b
) : advertisement a b
=
  (* Create the advertisement channel. *)
  let ad : advertisement a b = channel::new() in

  (* This function posts a new message on the advertisement
     channel and spawns the thread that will handle the
     request/reply. *)
  let rec post () : () =
    (* Post a message on the advertisement channel, containing
         a pair of fresh reply/request tubes. *)
      let request = tube::new()
      and reply   = synctube::new() in
      tube::setup [a] request;
      synctube::setup [b] reply;
      channel::send(ad, (request, reply));
      (* Spawn a new thread to wait for and deal with a request
         on the request tube. *)
      spawn (fun (| consumes (request @ tube::inlet a * reply @ synctube::outlet b)) : () =
        (* Wait for a client to grab this message. We will know
           that this has occurred once we receive a message via
           the [request] tube. *)
        let x = tube::receive request in
        (* In order to maintain the number of messages posted
           on the advertisement channel, post a new message and
           spawn a new thread. Ideally, in order to avoid slowing
           down the processing of the request, a delayed spawn
           might be useful here. *)
        post();
        (* Now, reply to the client by sending the result of [f]
           via the reply tube. *)
        synctube::send(reply, f(ad, x))
      )
  in

  (* Initially, post a fixed number [k] of messages on the advertisement
     channel. Thus, there will always be [k] messages on this channel,
     and there will always be [k] threads ready to receive a request on
     the corresponding request tubes. *)
  let k = 10 in
  for i = 1 to k do
    post();

  (* As soon as everything is set up, return the advertisement channel. *)
  ad

(*
Local Variables:
compile-command: "../mezzo server.mz"
End:
*)
