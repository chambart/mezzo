mutable data option a = Some { contents: a } | None
data t a = A | B { b: a }

(* That example is correct but the type-checker doesn't have a linearity
 * analysis for the [option] type. A value of type [option] may contain at most
 * one pointer to its argument so it's safe to apply the singleton subtyping
 * rule here. *)
val f (consumes x: t (=y), consumes y: option int): t (option int) =
  x
