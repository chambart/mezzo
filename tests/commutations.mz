val x: ([a] a -> a, int) =
  builtin foobar

val y: [a] (a -> a, int) =
  builtin foobar

val exchange: [a, b] (consumes (a, b)) -> (b, a) =
  builtin foobar

val z: [a] ref a =
  builtin foobar

val w: ref ([a]a) =
  builtin foobar

val z2: [a] wref::wref a =
  builtin foobar

val f [a] (consumes x: a): a = 
  x

val g [a, p: perm] (consumes (x: a | p)): (a | p) =
  x

val () =
  (* forall can be hoisted out a pair *)
  assert x @ [a] (a -> a, int);

  (* forall can be pushed into a pair *)
  assert y @ ([a] a -> a, int);

  (* two forall's commute *)
  assert exchange @ [b, a] (consumes (a, b)) -> (b, a);

  (* forall commutes with ref -- this one is sound because ref
     is known to be covariant *)
  assert z @ ref ([a] a);

  assert w @ [a] ref a;

  assert z2 @ wref::wref ([a] a);

  assert f @ [a, p: perm] (consumes (a | p)) -> (a | p);

  assert g @ [a] (consumes x: a) -> a;
