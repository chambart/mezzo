(* -------------------------------------------------------------------------- *)

(* The standard definition of immutable lists. *)

data list a =
  | Cons { head: a; tail: list a }
  | Nil

(* -------------------------------------------------------------------------- *)

(* Short-hands for constructing lists. *)

val nil =
  Nil

val cons [a] (consumes x: a, consumes xs: list a) : list a =
  Cons { head = x; tail = xs }

val two [a] (consumes x1: a, consumes x2: a) : list a =
  Cons { head = x1; tail = Cons { head = x2; tail = Nil }}

val three [a] (consumes x1: a, consumes x2: a, consumes x3: a) : list a =
  Cons { head = x1; tail = Cons { head = x2; tail = Cons { head = x3; tail = Nil }}}
 
(* -------------------------------------------------------------------------- *)

(* List length. *)

(* I am sure that not everybody will like this use of [if xs then ...]. I find
   it cute. Note that the access to [xs.tail] is safe! *)

val rec length_aux [a] (accu: int, xs: list a) : int =
  if xs then length_aux (accu + 1, xs.tail) else accu

val rec length [a] (xs: list a) : int =
  length_aux (0, xs)

(* -------------------------------------------------------------------------- *)

(* List head and tail. *)

(* These functions are likely to be of little use, but at least they are safe,
   unlike their ocaml counterparts. *)

val hd [a] (consumes xs: Cons { head: a; tail: unknown }) : a =
  xs.head

val tl [a] (consumes xs: Cons { head: unknown; tail: list a }) : list a =
  xs.tail

(* -------------------------------------------------------------------------- *)

(* Indexing operations. *)

val rec nth_aux [a] (consumes xs: list a, n: int) : a =
  if xs then
    if n = 0 then xs.head else nth_aux (xs.tail, n - 1)
  else
    fail

val nth [a] (consumes xs: list a, n: int) : a =
  if n < 0 then fail else nth_aux (xs, n)

val rec chop [a] (k: int, consumes xs: list a) : list a =
  if k = 0 then xs
  else if xs then chop (k - 1, xs.tail)
  else fail

val rec splitAt [a] (k: int, consumes xs: list a) : (list a, list a) =
  if k = 0 then
    Nil, xs
  else if xs then begin
    let prefix, suffix = splitAt (k - 1, xs.tail) in
    Cons { head = xs.head; tail = prefix }, suffix
  end
  else fail

(* -------------------------------------------------------------------------- *)

(* List concatenation and reversal. *)

val rec append [a] (consumes xs: list a, consumes ys: list a) : list a =
  if xs then
    Cons { head = xs.head; tail = append (xs.tail, ys) }
  else
    ys

val rec rev_append [a] (consumes xs: list a, consumes ys: list a) : list a =
  if xs then
    rev_append (xs.tail, Cons { head = xs.head; tail = ys })
  else
    ys

val rev [a] (consumes xs: list a) : list a =
  rev_append (xs, Nil)

(* -------------------------------------------------------------------------- *)

(* Flattening a list of lists. *)

val rec flatten [a] (consumes xss : list (list a)) : list a =
  if xss then
    append (xss.head, flatten xss.tail)
  else
    Nil

(* -------------------------------------------------------------------------- *)

(* Map. *)

(* The following type is not the most general type of [map]. The type-checker
   currently does not support type variables of kind perm, so we cannot allow
   the function [f] to have an arbitrary side effect. *)

(* The following type does allow the function [f] to perform a strong update
   on the argument list, whose type changes from [list a1] to [list a2]. A
   new list of type [list b] is produced. *)

val rec map [a1, a2, b] (
  f: (consumes  x:      a1) -> (     b |  x @      a2),
      consumes xs: list a1)  : (list b | xs @ list a2)
=
  if xs then
    Cons { head = f xs.head; tail = map (f, xs.tail) }
  else
    Nil

val rev_map [a1, a2, b] (
  f: (consumes  x:      a1) -> (     b |  x @      a2),
      consumes xs: list a1)  : (list b | xs @ list a2)
=
  let rec rev_map_aux (consumes accu: list b, consumes xs: list a1) : (list b | xs @ list a2) =
    if xs then
      rev_map_aux (Cons { head = f xs.head; tail = accu }, xs.tail)
    else
      accu
  in
  rev_map_aux (Nil, xs)

(* -------------------------------------------------------------------------- *)

(* Iteration. *)

(* The following type allows the function [f] to perform a strong update
   on the argument list, whose type changes from [list a1] to [list a2].
   It also allows [f] to have a side effect at [p]. *)
 
val rec iter [a1, a2, p : perm] (
  f: (consumes  x:      a1 | p) -> (|  x @      a2),
      consumes xs: list a1 | p)  : (| xs @ list a2)
=
  if xs then begin
    f xs.head;
    iter (f, xs.tail)
  end

(* The following function should not be useful to the client, who can just
   use [iter], but it is a good test of the type-checker. *)

val simpler_iter [a] (f: a -> (), xs: list a) : () =
  iter (f, xs)

(* -------------------------------------------------------------------------- *)

(* Fold. *)

(* The following type allows the function [f] to perform a strong update
   on the argument list, whose type changes from [list a1] to [list a2]. An
   accumulator of type [b] is maintained. A side effect at [p] is also permitted.*)
 
val rec fold_left [a1, a2, b, p : perm] (
  f: (consumes       b, consumes  x:      a1 | p) -> (b |  x @      a2),
      consumes accu: b, consumes xs: list a1 | p)  : (b | xs @ list a2)
=
  if xs then
    fold_left (f, f (accu, xs.head), xs.tail)
  else
    accu

val rec fold_right [a1, a2, b, p : perm] (
  f: (consumes  x:      a1, consumes       b | p) -> (b |  x @      a2),
      consumes xs: list a1, consumes accu: b | p)  : (b | xs @ list a2)
=
  if xs then
    f (xs.head, fold_right (f, xs.tail, accu))
  else
    accu

(* -------------------------------------------------------------------------- *)

(* Various flavors of list search. *)

(* Note that these are not instances of [fold], because we need to bail out
   early when the search is successful. *)

val rec for_all [a] (p: a -> bool, xs: list a) : bool =
  if xs then
    if p xs.head then for_all (p, xs.tail) else False
  else
    True

val rec exists [a] (p: a -> bool, xs: list a) : bool =
  if xs then
    if p xs.head then True else exists (p, xs.tail)
  else
    False

(* The function [find] cannot raise an exception, as it does in OCaml.
   Instead, it returns a sub-list, which either is empty or begins with
   the desired element. This is more general than returning an option,
   since it allows repeated searches, and is more efficient, since it
   does not require memory allocation! *)

val rec find [a] (p: a -> bool, consumes xs: list a) : list a =
  if xs then
    if p xs.head then xs else find (p, xs.tail)
  else
    Nil

(* The call [remove (p, xs)] produces the list [xs], deprived of the first
   element that satisfies the predicate [p], if there is one. *)

val rec remove [a] (p : a -> bool, consumes xs: list a) : list a =
  if xs then
    if p xs.head then xs.tail else Cons { head = xs.head; tail = remove (p, xs.tail) }
  else
    Nil

(* The function [mem] is parameterized with a notion of equality. It is just a
   variant of [find] that does not require the function [equal] to be
   partially applied to [x] ahead of time. *)

(* TEMPORARY in order to define [mem] in terms of [find], we need to define
   a predicate [p] that has access to [x]; this requires equipping [find]
   with a more general type that allows [p] to have a side effect. *)

val rec mem [a] (equal: (a, a) -> bool, x: a, consumes xs: list a) : list a =
  if xs then
    if equal (x, xs.head) then xs else mem (equal, x, xs.tail)
  else
    Nil

(* This function is commented out because of the current bug in function
 * comparisons involving structural types.

val assoc [a, b] (equal: (a, a) -> bool, x: a, consumes xs: list (a, b)) : list (a, b) =
  let equal_key ((key1: a, b), (key2: a, b)) : bool =
    equal (key1, key2)
  in
  mem [(a,b)] (equal_key, x, xs) *)

(* TEMPORARY
   mem   should be called find_equal
   assoc should be called find_equal_key
   remove could be specialized in the same ways as find *)

(* -------------------------------------------------------------------------- *)

(* Filtering. *) 

val filter [a] (p: a -> bool, consumes xs: list a) : list a =
  let f (consumes accu: list a, consumes x: a) : list a =
    if p x then Cons { head = x; tail = accu } else accu
  in
  rev (fold_left [a, unknown, list a, empty] (f, Nil, xs))

val partition [a] (p: a -> bool, consumes xs: list a) : (list a, list a) =
  let f (consumes (yes: list a, no: list a), consumes x: a) : (list a, list a) =
    if p x then
      Cons { head = x; tail = yes }, no
    else
      yes, Cons { head = x; tail = no }
  in
  let (yes, no) = fold_left [a, unknown, (list a, list a), empty] (f, (Nil, Nil), xs) in
  rev yes, rev no

(* -------------------------------------------------------------------------- *)

(* Lists of pairs. *)

val rec split [a, b] (consumes xys : list (a, b)) : (list a, list b) =
  if xys then begin
    let x, y = xys.head in
    let xs, ys = split xys.tail in
    Cons { head = x; tail = xs },
    Cons { head = y; tail = ys }
  end
  else
    Nil,
    Nil

val rec combine [a, b] (consumes xs: list a, consumes ys: list b) : list (a, b) =
  match xs, ys with
  | Cons, Cons ->
      Cons { head = (xs.head, ys.head); tail = combine (xs.tail, ys.tail) }
  | Nil, Nil ->
      Nil
  | Nil, Cons ->
      Nil
  | Cons, Nil ->
      Nil
  end

(* -------------------------------------------------------------------------- *)

(* Merging and sorting. *)

val rec merge [a] (cmp: (a, a) -> int, consumes xs: list a, consumes ys: list a) : list a =
  match xs, ys with
  | Nil, _ ->
      ys
  | _, Nil ->
      xs
  | Cons { head = x }, Cons { head = y } ->
      if cmp (x, y) <= 0
      then Cons { head = x; tail = merge (cmp, xs.tail, ys) }
      else Cons { head = y; tail = merge (cmp, xs, ys.tail) }
  end

(* Apparently this function doesn't work because of the ownership problem...?

val stable_sort [a] (cmp: (a, a) -> int, consumes xs: list a) : list a =
  (* Wrap the comparison function [cmp] so as to take an extra
     argument, [sense], which takes the value -1 or 1 and allows
     reversing the ordering if desired. *)
  let cmp (sense: int, x: a, y: a) : int =
    sense * cmp (x, y)
  in
  (* [rev_merge (sense, xs, ys, accu)] merges the lists [xs] and [ys]
     and concatenates the reverse of the resulting list in front of
     [accu]. The ordering is dictated by [sense]. *)
  let rec rev_merge (sense: int, consumes xs: list a, consumes ys: list a, consumes accu: list a) : list a =
    if xs then
      if ys then begin
        let x = xs.head
        and y = ys.head in
        if cmp (sense, x, y) <= 0
        then rev_merge (sense, xs.tail, ys, Cons { head = x; tail = accu })
        else rev_merge (sense, xs, ys.tail, Cons { head = y; tail = accu })
      end
      else
        rev_append (xs, accu)
    else
      rev_append (ys, accu)
  in
  (* This is the main sorting function. The integer [n] is always at
     least [2]. Again, the ordering is dictated by [sense]. *)
  let rec sort (sense: int, n: int, consumes xs: list a) : list a =
    (* Leaf cases. *)
    if n = 2 then
      match xs with
      | Cons { head = x1; tail = Cons { head = x2; tail = any }} ->
          if cmp (sense, x1, x2) <= 0 then two (x1, x2) else two (x2, x1)
      end
    else if n = 3 then
      match xs with
      | Cons { head = x1; tail = Cons { head = x2; tail = Cons { head = x3; tail = any }}} ->
          if cmp (sense, x1, x2) <= 0 then begin
            if cmp (sense, x2, x3) <= 0 then three (x1, x2, x3)
            else if cmp (sense, x1, x3) <= 0 then three (x1, x3, x2)
            else three (x3, x1, x2)
          end else begin
            if cmp (sense, x1, x3) <= 0 then three (x2, x1, x3)
	    else if cmp (sense, x2, x3) <= 0 then three (x2, x3, x1)
	    else three (x3, x2, x1)
          end
      end
    (* The general case. *)
    else begin
      let n1 = n / 2 in
      let n2 = n - n1 in
       (* TEMPORARY there is an ownership problem here: Damien uses a trick, which
          is to *not* truncate the list in the first recursive call. This will
          result in the permission for the list elements being lost. *)
      let xs1 = sort (-sense, n1, xs) in
      let xs2 = sort (-sense, n2, chop (n1, xs)) in
      rev_merge (-sense, xs1, xs2, Nil)
    end
  in
  let n = length xs in
  if n < 2 then xs else sort (1, n, xs) *)

(* -------------------------------------------------------------------------- *)

(* Comparison. *)

val rec equal [a, b] (eq: (a, b) -> bool, xs: list a, ys: list b) : bool =
  if xs then
    if ys then
      if eq (xs.head, ys.head) then
        equal (eq, xs.tail, ys.tail)
      else
        False
    else
      False
  else
    if ys then
      False
    else
      True

val rec compare [a, b] (cmp: (a, b) -> int, xs: list a, ys: list b) : int =
  if xs then
    if ys then begin
      let c = cmp (xs.head, ys.head) in
      if c = 0 then
        compare (cmp, xs.tail, ys.tail)
      else
        c
    end
    else
      1
  else
    if ys then
      -1
    else
      0

(*
Local Variables:
compile-command: "../mezzo list.mz"
End:
*)
