(* TEMPORARY should declare that array is covariant *)

(* ------------------------------------------------------------------------ *)

(* Basic operations over arrays. *)

(* [create (n, v)] creates a new array of [n] elements, which are
   initialized with the value [v]. Because [v] is copied, the type
   [a] must be duplicable. *)
val create : [a] duplicable a => (int, a) -> array a

(* [get (r, i)] reads the element at index [i] in the array [r].
   Because the value is copied, the type [a] must be duplicable. *)
val get : [a] duplicable a => (array a, int) -> a

(* [set (r, i, v)] sets the element at index [i] in the array [r]
   to the value [v]. *)
val set : [a] (array a, int, consumes a) -> ()

(* [length r] is the length of the array [r]. *)
val length : [a] array a -> int

(* [max_length] is the maximum length of an array. *)
val max_length : int

(* ------------------------------------------------------------------------ *)

(* Variants of the basic operations over arrays. *)

(* [init (n, f)] creates a new array of [n] elements, where the element
   at index [i] is initialized with the value [f i]. *)

val init : [a, p : perm] (
  s: sense,
  n: int,
  f: (int | p) -> a
  | p
) -> array a

(* The following functions are replacements for [get] in certain scenarios
   where the constraint [duplicable a], imposed by [get], is unnecessary. *)

(* [swap (r, i, j)] exchanges the elements at indices [i] and [j] in the
   array [r]. *)

val swap : [a] (r: array a, i: int, j: int) -> ()

(* [consult (r, i, f)] is [f r[i]]. *)

val consult : [a, pre : perm, b] (
  r: array a, i: int,
  f: (a | consumes pre) -> b
  | consumes pre
) -> b

(* [update (r, i, f)] is [r[i] <- f r[i]]. *)

val update : [a, pre : perm, post : perm] (
  r: array a, i: int,
  f: (consumes a | consumes pre) -> (a | post)
  | consumes pre
) -> (| post)

(* ------------------------------------------------------------------------ *)

(* Transformations of arrays. *)

(* [transform (s, r, f)] applies the function [f], in place, to every element
   of the array [r]. It can perform a strong update over the entire array: the
   types [a] and [b] need not coincide. *)

val transform : [a, b, p : perm] (
  s: sense,
  consumes r: array a,
  f: (int, consumes a | p) -> b
  | p
) -> (| r @ array b)

(* [map (r, f)] produces a new array whose contents are obtained by applying
   [f], pointwise, to the array [r]. *)

val map : [a, b, p : perm] (
  s: sense,
  r: array a,
  f: (a | p) -> b
  | p
) -> array b

(* [mapi] is analogous to [map], but applies [f] to the index and element. *)

val mapi : [a, b, p : perm] (
  s: sense,
  r: array a,
  f: (int, a | p) -> b
  | p
) -> array b

(* ------------------------------------------------------------------------ *)

(* Making copies of arrays or array segments. *)

(* [sub (r, ofs, len)] copies the array segment defined by [r], [ofs], and
   [len] into a new array. *)
val sub : [a] duplicable a =>
  (r: array a, ofs: int, len: int) ->
  array a

(* [copy r] copies the array [r] into a new array. *)
val copy : [a] duplicable a =>
  (r: array a) ->
  array a

(* [append (r1, r2)] concatenates the arrays [r1] and [r2] into a new array. *)
val append : [a] duplicable a =>
  (r1: array a, r2: array a) ->
  array a

(* [blit (r1, ofs1, r2, ofs2, len)] copies the array segment defined by [r1],
   [ofs1], and [len] into the array segment defined by [r2], [ofs2], and [len]. *)
val blit : [a] duplicable a =>
  (r1: array a, ofs1: int, r2: array a, ofs2: int, len: int) -> ()

(* The following three functions are special cases of [blit] that can be
   assigned more general types. *)

(* [steal (r1, r2, ofs2)] copies the array [r1] into the array segment defined
   by [r2], [ofs2], and [length r1]. The array [r1] is deprived of the ownership
   of its elements, which is transferred to [r2]. *)

val steal : [a]
  (consumes r1: array a, r2: array a, ofs2: int) ->
  (| r1 @ array unknown)

(* [overwrite (r1, ofs1, r2)] copies the array segment defined by [r1], [ofs1],
   and [length r2] into the array [r2], whose previous contents is completely
   lost. This operation performs a strong update over [r2]: the types [a] and
   [b] need not coincide. *)

val overwrite : [a, b] duplicable a =>
  (r1: array a, ofs1: int, consumes r2: array b) ->
  (| r2 @ array a)

(* [transfer (r1, r2)] copies the array [r1] into the array [r2]. The two
   arrays must have the same length. [transfer] is a combination of [steal]
   and [overwrite]: that is, the array [r1] is deprived of the ownership of
   its elements, which is transferred to [r2]; and the previous contents of
   [r2] is completely lost, so a strong update of [r2] is possible. *)

val transfer : [a, b]
  (consumes r1: array a, consumes r2: array b) ->
  (| r1 @ array unknown * r2 @ array a)

(* ------------------------------------------------------------------------ *)

(* Filling a segment with a value. *)

val fill_segment : [a] duplicable a => (r: array a, i: int,   j: int, v: a) -> ()
val fill         : [a] duplicable a => (r: array a, i: int, len: int, v: a) -> ()
val fill_array   : [a] duplicable a => (r: array a, v: a) -> ()

(* ------------------------------------------------------------------------ *)

(* Generic loops over a semi-open interval. *)

(* We use semi-open intervals of the form [i, j). That is, the index [i] is
   part of the interval, and the index [j] is not part of it. The interval
   is non-empty if and only if [i < j] holds. *)

(* The following four functions actually do not read (or write) any array
   elements. They deal only with the management of the current index. *)

val fold_segment : [a] (
  s: sense,
  i: int, j: int, consumes accu: a,
  f: (int, consumes a) -> a
) -> a

val iter_segment : [p : perm] (
  s: sense,
  i: int, j: int,
  f: (int | p) -> ()
  | p) -> ()

(* Generic loops over an entire array. *)

val fold_array : [a, b] (
  s: sense,
  r: array a, consumes seed: b,
  f: (int, consumes b | r @ array a) -> b
) -> b

val iter_array : [a, p : perm] (
  s: sense,
  r: array a,
  f: (int | r @ array a * p) -> ()
  | p) -> ()

(* ------------------------------------------------------------------------ *)

(* A variant of the above loops, where [f] receives not only an index [i],
   but also the corresponding array element. Note that [f] does not have
   permission to access the array [r]. *)

val foldi : [a, b] (
  s: sense,
  r: array a,
  consumes seed: b,
  f: (int, a, consumes accu: b) -> b
) -> b

val iteri : [a, p : perm] (
  s: sense,
  r: array a,
  f: (int, a | p) -> ()
  | p) -> ()

(* A degenerate variant of the above loops, where [f] has access to the
   element, but not the index [i]. Note that [f] does not have permission
   to access the array [r]. *)

val fold : [a, b] (
  s: sense,
  r: array a,
  consumes seed: b,
  f: (a, consumes accu: b) -> b
) -> b

val iter : [a, p : perm] (
  s: sense,
  r: array a,
  f: (a | p) -> ()
  | p) -> ()

(* -------------------------------------------------------------------------- *)

(* Sorting. *)

val sort : [a, p : perm] duplicable a => (
  cmp: (a, a | p) -> int,
  r: array a
  | p) -> ()

val sort_initial_segment : [a, p : perm] duplicable a => (
  cmp: (a, a | p) -> int,
  r: array a,
  l: int
  | p) -> ()

(* -------------------------------------------------------------------------- *)

(* Miscellaneous. *)

(* [above] repeatedly multiplies [x] by 2 until either [x >= n] holds
   or [2 * x] exceeds the maximum array length. *)

val above: (x: int, n: int) -> int

