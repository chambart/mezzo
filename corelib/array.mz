(* ------------------------------------------------------------------------ *)

(* The primitive operations on arrays. *)

(* WHEN IMPLEMENTING THESE OPERATIONS, DO NOT FORGET ABOUT THE ADOPTER
   FIELD. *)

val max_length : int =
  builtin _mz_array_max_length

val length : [a, m] array m a -> int =
  builtin _mz_array_length

val get : [a, m] duplicable a => (array m a, int) -> a =
  builtin _mz_array_get

val set : [a] (marray a, int, consumes a) -> () =
  builtin _mz_array_set

val unsafe_get : [a, m] duplicable a => (array m a, int) -> a =
  builtin _mz_array_unsafe_get

val unsafe_set : [a] (marray a, int, a) -> () =
  builtin _mz_array_unsafe_set

val create : [a, m] duplicable a => (int, a) -> array m a =
  builtin _mz_array_create

(* TEMPORARY the type of create is not quite general enough; the
   discussion about [fill_segment] applies here too. For this reason,
   in some cases, we will be forced to use [array::init] instead of
   [array::create]. *)

val unsafe_sub : [a, m1, m2] duplicable a => (array m1 a, int, int) -> array m2 a =
  builtin _mz_array_unsafe_sub

val append_prim : [a, m1, m2, m3] duplicable a => (array m1 a, array m2 a) -> array m3 a =
  builtin _mz_array_append_prim

(* OCaml's primitive operation [Array.concat] uses an OCaml list. We cannot
   expose it in Mezzo unless a Mezzo list is an OCaml list. This will be
   possible once we implement the keyword [slim]. *)

val unsafe_blit : [a, m] duplicable a => (array m a, int, marray a, int, int) -> () =
  builtin _mz_array_unsafe_blit

(* ------------------------------------------------------------------------ *)

(* [magic_get] is a version of [get] that does not carry the constraint
   [duplicable a]. It is unsound, so it must be used with care. We use it,
   below, to define a few operations which (we believe) are sound. *)

val magic_get : [a, m] (array m a, int) -> a =
  builtin _mz_array_get

(* The following functions can be programmed using [get] and [set], but if we
   do so, we end up with a constraint [duplicable a], which is in fact
   unnecessary, because no value is duplicated in the process. Thus, we use
   [magic_get] instead of [get]. *)

val swap [a] (r: marray a, i: int, j: int) : () =
  if i <> j then begin
    let ri = magic_get (r, i) in
    set (r, i, magic_get (r, j));
    set (r, j, ri)
  end

val replace [a] (r: marray a, i: int, consumes v: a) : a =
  let x = magic_get (r, i) in
  set (r, i, v); x

val consult [a, m, pre : perm, b] (
  r: array m a, i: int,
  f: (a | consumes pre) -> b
  | consumes pre
) : b =
  f (magic_get (r, i))

val update [a, pre : perm, post : perm] (
  r: marray a, i: int,
  f: (consumes a | consumes pre) -> (a | post)
  | consumes pre
) : (| post) =
  set(r, i, f (magic_get (r, i)))

(* [consult] is a particular use of [get], with delimited scope, that does
   not require the element type to be duplicable. The function [f] does not
   have access to the array, so using [consult] instead of [get] is a way
   of ensuring that we only read one element at a time (and give it back). *)

(* The type of [consult] advertises the fact that [consult] invokes [f]
   exactly once. Indeed, [f] is invoked at least once, otherwise [consult]
   would not be able to produce an element of type [b]. And [f] is invoked
   at most once, because [f] requires and consumes the permission [pre],
   which is not duplicable. *)

(* Analogous comments hold about [update]. *)

(* A drawback of this approach is that the user has to work in CPS style.
   Could we somehow impose the same discipline and obtain the same effect
   in direct style? We would need an abstract permission that represents
   an array with a hole at a particular index and a particular value, and
   we would need a coercion that fills the hole. I am afraid that it might
   be just as cumbersome as using [consult] or [update]! *)

(* ------------------------------------------------------------------------ *)

(* The following are safe wrappers for the unsafe primitive operations.
   They are implemented in the same manner as in OCaml. *)

val sub [a, m1, m2] duplicable a => (r: array m1 a, ofs: int, len: int) : array
m2 a =
  if len < 0 || ofs > length r - len
  then fail
  else unsafe_sub (r, ofs, len)

val copy [a, m1, m2] duplicable a => (r: array m1 a) : array m2 a =
  (* OCaml's implementation contains a special case for an array
     of length 0. We cannot keep this special case, due to the
     fact that our arrays are exclusive and have an adopter field. *)
  unsafe_sub (r, 0, length r)

val freeze [a, m] (consumes r: array m a) : (| r @ iarray a) =
  magic::magic ()

(* Internal function used to freeze or not a mutable array, depending on the
 * returned permission *)
val maybe_freeze [a, m] (consumes r: marray a) : (| r @ array m a) =
  magic::magic ()

val append [a, m1, m2, m3] duplicable a => (r1: array m1 a, r2: array m2 a) :
  array m3 a =
  let l1 = length r1 in
  if l1 = 0 then copy r2
  else if length r2 = 0 then unsafe_sub (r1, 0, l1)
  else append_prim (r1, r2)

val blit [a, m] duplicable a => (r1: array m a, ofs1: int, r2: marray a, ofs2: int, len: int) : () =
  if len < 0 || ofs1 < 0 || ofs1 > length r1 - len
             || ofs2 < 0 || ofs2 > length r2 - len
  then fail
  else unsafe_blit (r1, ofs1, r2, ofs2, len)

(* ------------------------------------------------------------------------ *)

(* The above copying functions are restricted to arrays of duplicable
   elements. However, it also makes sense to copy an array (or an array
   segment) of non-duplicable elements, provided the original array is
   subsequently deprived of the ownership of its elements.  We provide an
   experimental function, [steal], for this purpose.  *)

(* Because we do not have permissions for an array segment, all of the
   original array elements are lost, even if only a segment of the array is
   copied. For simplicity, we force the entire array to be copied; we do not
   allow copying a segment and losing the ownership of the rest (although we
   could). *)

(* The original array itself is not lost; it becomes an array of unknown data,
   which can be re-used to store new data, if desired. *)

val total_blit [a, m] duplicable a => (r1: array m a, r2: marray a, ofs2: int) : () =
  blit (r1, 0, r2, ofs2, length r1)

val steal : [a, m] (consumes r1: array m a, r2: marray a, ofs2: int) -> (| r1 @
array m unknown) =
  magic::magic total_blit

(* [steal] is a variant of [blit]. One could also define variants of [sub],
   [copy], [append], based on the same principle. *)

(* ------------------------------------------------------------------------ *)

(* Here is another variant of [blit], this time for the case where the
   entire destination array is written. In this case, a strong update
   is possible. *)

val surjective_blit [a, m] duplicable a => (r1: array m a, ofs1: int, r2: marray a) : () =
  blit (r1, ofs1, r2, 0, length r2)

val overwrite : [a, m] duplicable a => (r1: array m a, ofs1: int, consumes r2:
  marray unknown) -> (| r2 @ marray a) =
  magic::magic surjective_blit

(* ------------------------------------------------------------------------ *)

(* The above two variants of [blit] can be combined! *)

val bijective_blit [a, m] duplicable a => (r1: array m a, r2: marray a) : () =
  let l2 = length r2 in
  if length r1 <> l2
  then fail
  else blit (r1, 0, r2, 0, l2)

val transfer : [a, m] (consumes r1: array m a, consumes r2: marray unknown) ->
  (| r1 @ array m unknown * r2 @ marray a) =
  magic::magic bijective_blit

(* -------------------------------------------------------------------------- *)

(* Generic loops over a semi-open interval. *)

val rec fold_segment_up [a] (
  i: int, j: int, consumes accu: a,
  f: (int, consumes a) -> a
) : a =
  if i < j then
    fold_segment_up (i + 1, j, f (i, accu), f)
  else
    accu

val rec fold_segment_down [a] (
  i: int, j: int, consumes accu: a,
  f: (int, consumes a) -> a
) : a =
  if i < j then
    fold_segment_down (i, j - 1, f (j - 1, accu), f)
  else
    accu

val fold_segment [a] (
  s: sense,
  i: int, j: int, consumes accu: a,
  f: (int, consumes a) -> a
) : a =
  match s with
  | Up ->
      fold_segment_up (i, j, accu, f)
  | Down ->
      fold_segment_down (i, j, accu, f)
  end

val rec iter_segment_up [p : perm] (
  i: int, j: int,
  f: (int | p) -> () 
  | p
) : () =
  if i < j then begin
    f(i);
    iter_segment_up (i + 1, j, f)
  end

val rec iter_segment_down [p : perm] (
  i: int, j: int,
  f: (int | p) -> () 
  | p
) : () =
  if i < j then begin
    f(j - 1);
    iter_segment_down (i, j - 1, f)
  end

val iter_segment [p : perm] (
  s: sense,
  i: int, j: int,
  f: (int | p) -> () 
  | p
) : () =
  match s with
  | Up ->
      iter_segment_up (i, j, f)
  | Down ->
      iter_segment_down (i, j, f)
  end

(* Generic loops over an entire array. *)

val fold_array [a, m, b] (
  s: sense,
  r: array m a, consumes seed: b,
  f: (int, consumes b | r @ array m a) -> b
) : b =
  fold_segment [(b | r @ array m a)] (s, 0, length r, seed, f)
  (* WISH could we get rid of this type application? *)

val iter_array [a, m, p : perm] (
  s: sense,
  r: array m a,
  f: (int | r @ array m a * p) -> ()
  | p
) : () =
  iter_segment (s, 0, length r, f)

(* -------------------------------------------------------------------------- *)

(* A variant of the above loops, where [f] receives not only an index [i],
   but also the corresponding array element. *)

(* Because the type [a] is not assumed duplicable, getting hold of the
   element temporarily invalidates the array, which implies that [f]
   cannot receive the permission [r @ array a]. This is unfortunate.
   We could offer a variant of this function where [a] is assumed
   duplicable and [f] receives this permission. (This also suggests
   that conditional permissions, of the form (duplicable a => p),
   might be useful! TEMPORARY *)

(* Furthermore, we could define variants of these operations where
   [f] changes the type of its argument, and the loop changes the
   type of the array. TEMPORARY *)

val foldi [a, m, b] (
  s: sense,
  r: array m a, consumes seed: b,
  f: (int, a, consumes accu: b) -> b
) : b =
  fold_array (s, r, seed, fun (i: int, consumes accu: b | r @ array m a) : b =
    consult (r, i, fun (v: a | consumes accu @ b) : b =
      f (i, v, accu)
    )
  )

val iteri [a, m, p : perm] (
  s: sense,
  r: array m a,
  f: (int, a | p) -> ()
  | p
) : () =
  iter_array (s, r, fun (i: int | r @ array m a * p) : () =
    consult [a, m, p, (| p)] (r, i, fun (v: a | p) : () =
      (* WISH could we get rid of this type application? *)
      f (i, v)
    )
  )

(* A degenerate variant of the above loops, where the function [f] has
   access to the element, but not the index [i] or to the array [x]. *)

val fold [a, m, b] (
  s: sense,
  r: array m a,
  consumes seed: b,
  f: (a, consumes accu: b) -> b
) : b =
  fold_array (s, r, seed, fun (i: int, consumes accu: b | r @ array m a) : b =
    consult (r, i, fun (v: a | consumes accu @ b) : b =
      f (v, accu)
    )
  )

val iter [a, m, p : perm] (
  s: sense,
  r: array m a,
  f: (a | p) -> ()
  | p
) : () =
  iter_array (s, r, fun (i: int | r @ array m a * p) : () =
    consult [a, m, p, (| p)] (r, i, fun (v: a | p) : () =
      f v
    )
  )

(* ------------------------------------------------------------------------ *)

(* [transform] is an in-place version of [mapi]: if applies the function [f],
   in place, to every element of the array. It can be used to perform a strong
   update over the entire array. This strong update cannot be type-checked in
   Mezzo today, so we cheat. *)

val weak_transform [a, p : perm] (
  s: sense,
  r: marray a,
  f: (int, consumes a | p) -> a
  | p
) : () =
  iter_array (s, r, fun (i: int | r @ marray a * p) : () =
    update [a, p, p] (r, i, fun (consumes x: a | p) : a = f(i, x))
  )

val transform : [a, b, p : perm] (
  s: sense,
  consumes r: marray a,
  f: (int, consumes a | p) -> b
  | p
) -> (| r @ marray b) =
  magic::magic [
    ([a, p : perm] (s: sense, r: marray a, f: (int, consumes a | p) -> a | p) -> ()),
    ([a, b, p : perm] (s: sense, consumes r: marray a, f: (int, consumes a | p)
    -> b | p) -> (| r @ marray b))
  ]
  (* TEMPORARY the above type application is used to work around a BUG *)
  weak_transform

(* One could imagine variants of this operation, e.g., an operation that
   performs a strong update simultaneously over TWO arrays, etc., etc.
   We cannot possibly think of all combinations. A truly general solution
   involves permissions for array segments, which allow [transform] and
   its variants to be programmed and type-checked. *)

(* ------------------------------------------------------------------------ *)

(* [init] is the composition of [create] and [transform]. *)

val init [a, m, p : perm] (
  s: sense,
  n: int,
  f: (int | p) -> a
  | p)
  : array m a
=
  (* Allocate an array and fill it with an arbitrary value, say 0.
     Because the type [int] is duplicable, this is well-typed! *)
  let r : marray int = create (n, 0) in
  (* Transform the array. *)
  transform (s, r, fun (i: int, int | p) : a =
    f i
  );
  maybe_freeze r;
  r

(* Map. *)

val map [a, m1, b, m2, p : perm] (
  s: sense,
  r: array m1 a,
  f: (a | p) -> b
  | p
) : array m2 b =
  init (s, length r, fun (i: int | r @ array m1 a * p) : b =
    consult [a, m1, p, (b | p)] (r, i, f)
  )

val mapi [a, m1, b, m2, p : perm] (
  s: sense,
  r: array m1 a,
  f: (int, a | p) -> b
  | p
) : array m2 b =
  init (s, length r, fun (i: int | r @ array m1 a * p) : b =
    consult [a, m1, p, (b | p)] (r, i, fun (v: a | p) : b =
      f (i, v)
    )
  )

(* By cheating, one could also offer versions of [map] and [mapi] that perform
   a strong update on the original array. TEMPORARY *)

(* -------------------------------------------------------------------------- *)

(* Filling a segment with a value. *)

(* TEMPORARY could also offer a version that steals the elements from the array
   when they are not duplicable *)

(* TEMPORARY there are situations where the type [a] is not duplicable, but the
   value [v] is duplicable. This happens, for instance, when the type is [option a]
   and the value is [None]. At the moment, we cannot express this scenario. Perhaps
   we could distinguish two types, [a] and [b], require [r: array a] and [v: b],
   where [b] is a duplicable subtype of [a]. But we do not have subtype constraints
   (yet!). We could replace the subtype constraint with a function of type [b -> a],
   but that would be less efficient (and cumbersome, in the common case where [a]
   and [b] coincide). *)

val rec fill_segment [a] duplicable a => (r: marray a, i: int, j: int, v: a) : () =
  if i < j then begin
    set (r, i, v);
    fill_segment (r, i + 1, j, v)
  end

val fill [a] duplicable a => (r: marray a, i: int, len: int, v: a) : () =
  fill_segment (r, i, i + len, v)

val fill_array [a] duplicable a => (r: marray a, v: a) : () =
  fill_segment (r, 0, length r, v)

(* -------------------------------------------------------------------------- *)

(* Searching. *)

(* [first_from (r, i, f)] returns the position j of the first element after the
 * [i]-th verifying [f r[j]]. *)
val first_from [a, m, p: perm] (
  r: array m a,
  i: int,
  f: (a | p) -> bool
  | p
) : int =
  let rec loop (
    i: int
    | r @ array m a * p
  ) : int =
    if i = length r then length r
    else if consult [b=(bool|p)] (r, i, f) then i
    else loop (i + 1)
  in loop i

(* [last_from (s, i, f)] returns the position j of the last element before the
 * [i]-th verifying [f r[j]]. *)
val last_from [a, m, p: perm] (
  r: array m a,
  i: int,
  f: (a | p) -> bool
  | p
) : int =
  let rec loop (
    i: int
    | r @ array m a * p
  ) : int =
    if i = -1 then -1
    else if consult [b=(bool|p)] (r, i, f) then i
    else loop (i - 1)
  in loop i

(* [first (r, f)] is [first_from (r, 0, f)]. *)
val first [a, m, p: perm] (
  r: array m a,
  f: (a | p) -> bool
  | p
) : int =
  first_from (r, 0, f)

(* [last (r, f)] is [last_from (r, length r - 1, f)]. *)
val last [a, m, p: perm] (
  r: array m a,
  f: (a | p) -> bool
  | p
) : int =
  last_from (r, length r - 1, f)

(* Auxiliary function for KMP. *)
val build_table [a, m, p : perm] duplicable a => (
  needle: array m a,
  eq: (a, a | p) -> bool
  | p
) : iarray int =
  let table = create (length needle, 0) in
  set (table, 0, -1);

  let rec loop (i: int, j: int | needle @ array m a * table @ marray int * p) : () =
    if i >= length needle
    then ()
    else if eq (get (needle, i-1), get(needle, j))
    then begin
      set(table, i, j+1);
      loop (i+1, j+1)
    end
    else if j > 0
    then loop(i, get(table, j))
    else begin
      set(table, i, 0);
      loop(i+1, 0)
    end
  in
  loop (2, 0);
  freeze table;
  table

(* [search (needle, haystack, eq)] returns the position of the first occurence
 * of [needle] in [haystack], using [eq] to compare elements of both arrays. *)
val search [a, m1, m2, p : perm] duplicable a => (
  needle: array m1 a,
  haystack: array m2 a,
  eq: (a, a | p) -> bool
  | p
) : int =
  let table = build_table (needle, eq) in
  let rec loop (
    m: int, i: int 
    | needle @ array m1 a * haystack @ array m2 a * p)
  : int =
    if m + 1 >= length haystack
    then length haystack
    else if eq (get (needle, i), get(haystack, m + i))
    then begin
      if i == length needle - 1
      then m
      else loop(m, i+1)
    end
    else
      loop(m + i - (get (table, i)), 
        if get (table, i) > -1
        then get (table, i)
        else 0)
  in loop (0, 0)

(* -------------------------------------------------------------------------- *)

(* Sorting. *)

(* This is a port of OCaml's ternary heap sort. *)

(* The three children of the node [i] are [i31], [i31+1], and [i31+2], where
   [i31] stands for [i*3+1]. *)

(* The parameter [l] can be thought of as the length of the array [r].
   Actually, [l] may be less than the length of the array [r]; in that
   case, only an initial segment of the array will be sorted. *)

val sort_initial_segment [a, p : perm] duplicable a => (
  cmp: (a, a | p) -> int,
  r: marray a,
  l: int
  | p) : () =

  (* The function [maxson] tells which of the children of the node [i] has
     the greatest value. This node may have zero, one, two, or three children.
     If there is at least one child, then the call returns the index of the
     maximum child to the [normal] continuation. If there is zero child, then
     the call returns the index [i] to the [bottom] continuation. This is a
     double-barreled CPS encoding of the original OCaml code, which uses an
     exception to signal that we have hit the bottom. *)

  (* The [consumes] annotation on the three occurrences of [r @ array a] below
     seems to be optional. I believe that it should in principle be present.
     By omitting this annotation, we would be committing to preserving this
     permission, so we would be fixing a more specific type for [maxson]. In
     essence, we would be specializing the answer type [b] to a type of the
     form [b | r @ array a]. *)

  let maxson [b] (
    l: int, i: int,
    bottom: (int | consumes (p * r @ marray a)) -> b,
    normal: (int | consumes (p * r @ marray a)) -> b
                 | consumes (p * r @ marray a))  : b =
    let i31 = i+i+i+1 in
    if i31+2 < l then begin
      (* If there are three children, find which one has the maximum value. *)
      let max = newref i31 in
      if cmp (get (r, i31),  get (r, i31+1)) < 0 then max := i31+1;
      if cmp (get (r, !max), get (r, i31+2)) < 0 then max := i31+2;
      normal !max
    end
    else if i31+1 < l then begin
      (* If there are just two children, find which one has the maximum value. *)
      let max = if cmp (get (r, i31), get (r, i31+1)) < 0 then i31+1 else i31 in
      normal max
    end
    else if i31 < l then
      (* If there is just one child, return it. *)
      normal i31
    else
      (* If there are no children, we have hit the bottom. Return [i]
        via the exceptional continuation. *)
      bottom i
  in

  (* The function [trickledown] trickles the element [e] down node [i].
     The normal continuation is specialized to an empty continuation. *)

  let rec trickledown (
    l: int, i: int, e: a,
    bottom: (int | p * r @ marray a) -> ()
    | p * r @ marray a
  ) : () =
    maxson [b = (| p * r @ marray a)] (l, i, bottom, fun (j: int | p * r @ marray a) : () =
      (* [j] is the maximum son of [i]. If the element [e] is ? than the
        element found at [j], then send it down, otherwise write [e] into
        node [i]. *)
      if cmp (get (r, j), e) > 0 then begin
       set (r, i, get (r, j));
       trickledown (l, j, e, bottom)
      end
      else
       set (r, i, e)
    )
  in

  (* The function [trickle] provides [trickledown] with a bottom continuation
     that writes [e] into the childless node.  *)

  let trickle (l: int, i: int, e: a | p * r @ marray a) : () =
    trickledown (l, i, e, fun (i: int | p * r @ marray a) : () =
      set (r, i, e)
    )
  in

  (* The function [bubbledown] is analogous to [trickledown], but inserts a
     a hole, rather than an element. It never terminates normally, i.e. it
     always reaches a point where [maxson] invokes its bottom continuation.
     For this reason, we can supply an identity continuation to [maxson]. *)

  let identity (i: int | p * r @ marray a) : int =
    i
  in

  let rec bubbledown (
    l: int, i: int
    | p * r @ marray a
  ) : int =
    maxson [b = (int | p * r @ marray a)] (l, i, identity, fun (j: int | p * r @
    marray a) : int =
      set (r, i, get (r, j));
      bubbledown (l, j)
    )
  in

  (* Trickle up... *)

  let rec trickleup (i: int, e: a | p * r @ marray a) : () =
    let father = (i - 1) / 3 in
    if cmp (get (r, father), e) < 0 then begin
      set (r, i, get (r, father));
      if father > 0 then trickleup (father, e) else set (r, 0, e)
    end
    else
      set (r, i, e)
  in

  (* The main algorithm. *)

  if l < 0 || l > length r then
    fail;
  iter_segment_down (0, (l + 1) / 3, fun (i: int | p * r @ marray a) : () =
    trickle (l, i, get (r, i))
  );
  iter_segment_down (2, l, fun (i: int | p * r @ marray a) : () =
    let e = get (r, i) in
    set (r, i, get (r, 0));
    trickleup (bubbledown (i, 0), e)
  );
  if l > 1 then
    swap (r, 0, 1)

val sort [a, p : perm] duplicable a => (
  cmp: (a, a | p) -> int,
  r: marray a
  | p) : () =
  sort_initial_segment (cmp, r, length r)

val sorted [a, m1, m2, p : perm] duplicable a => (
  cmp: (a, a | p) -> int,
  r: array m1 a
  | p) : array m2 a =
    let r = copy r in
    sort (cmp, r);
    maybe_freeze r;
    r

(* -------------------------------------------------------------------------- *)

(* Sorting an array of non-duplicable elements. *)

(* TEMPORARY this is just a demonstration; this code is currently limited to
   a fixed adopter type and a fixed adoptee type, namely [pool a] and [ref a].
   Ideally, it should be polymorphic in [t] and [u], where [t adopts u]. One
   could simulate this by abstracting over [taking], or over [take] and [give],
   but that would be a bit heavy. *)

data mutable pool a = Pool adopts ref a

val nonduplicable_sort [a, s : perm] (
  cmp: (ref a, ref a | s) -> int,
  r: marray dynamic,
  p : pool a
  | s
) : () =
  (* Define a function that compares two elements at type [dynamic]. *)
  let cmp (x: dynamic, y: dynamic | s * p @ pool a) : int =
    if x == y then 0
    else
      taking x from p begin
       taking y from p begin
         cmp (x, y)
       end
      end
  in
  sort (cmp, r)

(* -------------------------------------------------------------------------- *)

(* Miscellaneous. *)

val rec above_pow (x: int, n: int) : int =
  if x >= n then x
  else if x * 2 > max_length then x
  else above_pow (x * 2, n)

(*
Local Variables:
compile-command: "../mezzo array.mz"
End:
*)

