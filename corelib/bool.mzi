(* The type [bool] of Booleans. *)

data bool =
  | False
  | True

(* Constants. *)

val false : bool
val true : bool

(* Negation. *)

val not : bool -> bool

(* The type [rich_bool] of Booleans indexed with permissions. *)

data rich_bool (p : perm) (q: perm) =
  | RichFalse { | p }
  | RichTrue { | q }

(* Negation. *)

val rich_not : [p : perm, q : perm] (consumes rich_bool p q) -> rich_bool q p

(* Conjunction and disjunction. *)

val conjunction :
  [q : perm, p1 : perm, p2 : perm, s : perm]
  (
    consumes b1 : rich_bool q p1,
    b2: (| s * consumes p1) -> rich_bool q p2
  | s
  ) -> rich_bool q p2

val disjunction :
  [q1 : perm, q2 : perm, p : perm, s : perm]
  (
    consumes b1 : rich_bool q1 p,
    b2: (| s * consumes q1) -> rich_bool q2 p
  | s
  ) -> rich_bool q2 p

(* Conversion to a bare Boolean. *)

val strip: [p : perm, q : perm] (b: rich_bool p q) -> bool

