(* The type [bool] of Booleans. *)

data bool =
  | False
  | True

(* Constants. *)

val false : bool
val true : bool

(* Negation. *)

val not : bool -> bool

(* The type [rich_bool] of Booleans indexed with permissions. *)

data rich_bool +(p : perm) +(q: perm) =
  | RichFalse { | q }
  | RichTrue { | p }

(* Negation. *)

val rich_not : [p : perm, q : perm] (consumes rich_bool p q) -> rich_bool q p

(* Conjunction and disjunction. *)

val conjunction :
  [p1 : perm, p2 : perm, q : perm, s : perm]
  (
    consumes b1 : rich_bool p1 q,
    b2: (| s * consumes p1) -> rich_bool p2 q
  | s
  ) -> rich_bool p2 q

val disjunction :
  [p : perm, q1 : perm, q2 : perm, s : perm]
  (
    consumes b1 : rich_bool p q1,
    b2: (| s * consumes q1) -> rich_bool p q2
  | s
  ) -> rich_bool p q2

