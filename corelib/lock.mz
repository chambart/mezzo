(* TEMPORARY these built-in operations are currently not implemented! *)

abstract lock (p: perm)
fact duplicable (lock p)

abstract locked

val new: [p: perm] (| consumes p) -> lock p =
  builtin __mz_lock_new

val acquire:     [p: perm] (l: lock p) -> (| p * l @ locked) =
  builtin __mz_lock_acquire

val try_acquire: [p: perm] (l: lock p) -> rich_bool empty (p * l @ locked) =
  builtin __mz_lock_try_acquire

val release: [p: perm] (l: lock p | consumes (p * l @ locked)) -> () =
  builtin __mz_lock_release

val borrow [p: perm, q: perm, b] (
  l: lock p,
  f: (| p * consumes q) -> b
| consumes q
) : b =
  acquire l;
  (* We could pass [l @ locked] to [f], but we don't, so [f] cannot
     release the lock, either intentionally or by mistake. *)
  let x = f() in
  release l;
  x

(*
Local Variables:
compile-command: "../mezzo lock.mz"
End:
*)
