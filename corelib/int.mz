(* The primitive type [int] of integers. *)

abstract int
fact duplicable int

(* Primitive arithmetic operations on integers. *)

val ( + ) : (x: int, y: int) -> (z: int | {z = x + y}) = builtin _mz_iadd
val ( - ) : (x: int, y: int) -> (z: int | {z = x - y}) = builtin _mz_isub
val ( * ) : (x: int, y: int) -> (z: int | {z = x * y}) = builtin _mz_imul
val ( / ) : (x: int, y: int | {y <> 0}) -> (z: int | {z = x / y}) = builtin _mz_idiv

(* Primitive bitwise operations on integers. *)

val ( & )  : (int, int) -> int  = builtin _mz_iand

(* Primitive comparison operators on integers. *)

val ( = )  : (x: int, y: int) -> rich_bool ({x <> y}) ({x = y}) = builtin _mz_ieq
val ( <> ) : (x: int, y: int) -> rich_bool ({x = y}) ({x <> y}) = builtin _mz_ine
val ( < )  : (x: int, y: int) -> rich_bool ({x >= y}) ({x < y}) = builtin _mz_ilt
val ( <= ) : (x: int, y: int) -> rich_bool ({x > y}) ({x <= y}) = builtin _mz_ile
val ( > )  : (x: int, y: int) -> rich_bool ({x <= y}) ({x > y}) = builtin _mz_igt
val ( >= ) : (x: int, y: int) -> rich_bool ({x < y}) ({x >= y}) = builtin _mz_ige

(* Defined operations on integers. *)

val min (x: int, y: int) : (z: int | {x >= z} * {y >= z}) =
  if x <= y then x else y

val max (x: int, y: int) : (z: int | {x <= z} * {y <= z}) =
  if x <= y then y else x

