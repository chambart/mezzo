(* -------------------------------------------------------------------------- *)

(* The algebraic data type of mutable lists. *)

data mlist a =
  | MNil
  | mutable MCons { head: a; tail: mlist a }

(* -------------------------------------------------------------------------- *)

(* Length. *)

val length: [a] mlist a -> int

(* -------------------------------------------------------------------------- *)

(* Search. *)

val mem: [a, p : perm] (
  equal: (a, a | p) -> bool,
  x: a,
  xs: mlist a
| p
) -> bool

(* -------------------------------------------------------------------------- *)

(* In-place reversal. *)

val rev_append: [a] (consumes mlist a, consumes mlist a) -> mlist a
val rev: [a] (consumes mlist a) -> mlist a

(* -------------------------------------------------------------------------- *)

(* Indexing. *)

val splitAt: [a] (int, consumes mlist a) -> (mlist a, mlist a)

(* -------------------------------------------------------------------------- *)

(* Merging and sorting. *)

val merge: [a] (
  cmp: (a, a) -> int,
  consumes mlist a,
  consumes mlist a
) -> mlist a

val sort: [a] (
  cmp: (a, a) -> int,
  consumes mlist a
) -> mlist a

(* -------------------------------------------------------------------------- *)

(* Freezing. *)

val freeze: [a] (consumes xs: mlist a) -> (| xs @ list::list a)

(* -------------------------------------------------------------------------- *)

