(* [memoize (hash, eq, f)] builds a memoizing version of the function [f],
   using an internal hash table based on the provided hash and equality
   functions. *)

(* If [f] has type [a -> b], the types [a] and [b] must be duplicable,
   because arguments and results will be stored in the internal hash
   table. *)

(* The function [f] may have a side effect, represented by [s]. This must be
   used with caution: it often does not make sense to memoize a function that
   has a side effect. *)

val memoize:
  [a, b, s : perm]
  duplicable a => duplicable b =>
  (hash: a -> int, eq: (a, a) -> bool, f: (a | s) -> b | consumes s) ->
  a -> b

(* Now, a memoizing fixpoint combinator. Here, the argument [f] is not a
   closed function, but an open recursive function, i.e., it is parameterized
   over [self]. So, [f] should have type [(self: a -> b, x: a) -> y: b]. *)

(* Actually, we require [f] to have a slightly more general type, which is
   parametric in an unknown permission [p]. Thus, we tell our client that
   [self] may have a side effect, and that (of course) we expect the
   application of [f] to [self] to have the same side effect. Incidentally,
   note that this type prevents [f] from storing [self] and re-using after
   [f] has returned! So, we are telling [f], ``you can use [self] now if
   you wish, but you are not allowed to use it later''. *)

val fix:
  [a, b]
  duplicable a => duplicable b =>
  (
    hash: a -> int,
    eq: (a, a) -> bool,
    f: [p : perm] ((a | p) -> b, a | p) -> b
  ) ->
  a -> b

