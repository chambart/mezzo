(* This module implements association maps using height-balanced trees.
   The code is modeled after OCaml's [Map] library, but has been modified
   to allow trees to be modified in place. *)

(* -------------------------------------------------------------------------- *)

(* Some stuff that should be moved to another file. *) (* TEMPORARY *)

val max (x: int, y: int) : int =
  if x >= y then x else y

(* -------------------------------------------------------------------------- *)

(* A tree is either empty or a binary node. Besides its children, a binary
   node contains a key, a value, and its height. *)

mutable data tree k a =
  | Empty
  | Node { left: tree k a; key: k; value: a; right: tree k a; height: int }

(* -------------------------------------------------------------------------- *)

(* Cardinal. *)

val rec cardinal [k, a] (t: tree k a) : int =
  match t with
  | Empty ->
      0
  | Node ->
      cardinal t.left + 1 + cardinal t.right
  end

(* -------------------------------------------------------------------------- *)

(* The following (private) function reads the height information that is
   stored in a node. It does not recompute anything. *)

val height [k, a] (t: tree k a) : int =
  match t with
  | Empty -> 0
  | Node  -> t.height
  end

(* The following (private) function updates the height information that is
   stored in a node, based on the height of its children. *)

val update_height [k, a] (
  consumes t : Node { left: tree k a; key: k; value: a; right: tree k a; height: unknown }
) : ( |    t @ Node { left: tree k a; key: k; value: a; right: tree k a; height: int     }) =
  t.height <- max (height t.left, height t.right) + 1

(* The following (private) function re-organizes a tree, if required, by
   performing a rotation at the root. The left and right sub-trees are
   expected to have almost equal heights. The address of the new tree root
   is returned. *)

val bal [k, a] (
  consumes t: Node { left: tree k a; key: k; value: a; right: tree k a; height: unknown }
) : tree k a =

  (* Extract the two sub-trees and their heights. *)
  let Node { left = l; right = r } = t in
  let hl = height l
  and hr = height r in

  (* Determine whether the tree is unbalanced and needs to be repaired. *)

  (* Situation 1: the left sub-tree is too big. *)
  if hl > hr + 2 then match l with
  | Empty -> fail (* impossible! *)
  | Node { left = ll; right = lr } ->
      if height ll >= height lr then begin
	(* The left node becomes the root node. *)
	(* The root node becomes the right child. *)
	t.left <- lr;
	update_height t;
	l.right <- t;
	update_height l;
	l
      end
      else match lr with
      | Empty -> fail (* impossible! *)
      | Node { left = lrl; right = lrr } ->
	  (* The node [lr] becomes the root node. *)
	  (* The root node becomes the right child. *)
	  (* The left node remains the left child. *)
	  l.right <- lrl;
	  update_height l;
	  t.left <- lrr;
	  update_height t;
	  lr.left <- l;
	  lr.right <- t;
	  update_height lr;
	  lr
      end
  end

  (* Situation 2: the right sub-tree is too big. *)
  else if hr > hl + 2 then match r with
  | Empty -> fail (* impossible! *)
  | Node { left = rl; right = rr } ->
      if height rr >= height rl then begin
	(* The right node becomes the root node. *)
        (* The root node becomes the left child. *)
	t.right <- rl;
	update_height t;
	r.left <- t;
	update_height r;
	r
      end
      else match rl with
      | Empty -> fail (* impossible! *)
      | Node { left = rll; right = rlr } ->
	  (* The node [rl] becomes the root node. *)
	  (* The root node becomes the left child. *)
	  (* The right node remains the right child. *)
          t.right <- rll;
	  update_height t;
	  r.left <- rlr;
	  update_height r;
	  rl.left <- t;
	  rl.right <- r;
	  update_height rl;
	  rl
      end
  end

  (* Last situation: the tree is not unbalanced. *)
  (* Just update its height field. [t] remains the root. *)
  else begin
    t.height <- max (hl, hr) + 1;
    t
  end

(* -------------------------------------------------------------------------- *)

(* Creating an empty tree. *)

val create [k, a] () : tree k a =
  Empty

(* Creating a singleton tree. *)

val singleton [k, a] (consumes (x: k, d: a)) : tree k a =
  Node { left = Empty; key = x; value = d; right = Empty; height = 1 }

(* Testing whether a tree is empty. *)

val is_empty [k, a] (t : tree k a) : bool =
  match t with
  | Empty -> True
  | Node  -> False
  end

(* -------------------------------------------------------------------------- *)

(* Insertion. *)

val rec add [k, a] (
  cmp: (k, k) -> int,
  consumes x: k,
  consumes d: a,
  consumes t: tree k a
) : tree k a =
  match t with
  | Empty ->
      (* Create a singleton tree. *)
      Node { left = t; key = x; value = d; right = Empty; height = 1 }
  | Node ->
      let c = cmp (x, t.key) in
      if c = 0 then begin
	(* The key already exists; overwrite the previous data *)
	t.value <- d;
	t
      end
      else if c < 0 then begin
	t.left <- add (cmp, x, d, t.left);
	bal t
      end
      else begin
	t.right <- add (cmp, x, d, t.right);
	bal t
      end
  end

(* -------------------------------------------------------------------------- *)

(* Lookup. *)

(* It seems that the function [find] must require [duplicable a].
   Indeed, without this hypothesis, we would be forced to consume
   the argument tree [t], which does not seem reasonable. *)

val rec find [k, a] duplicable a => (
  cmp: (k, k) -> int,
  x: k,
  t: tree k a
) : option a =
  match t with
  | Empty ->
      none
  | Node ->
      let c = cmp (x, t.key) in
      if c = 0 then some t.value
      (* It is interesting to note that we cannot write the more compact code:
	 find (cmp, x, (if c < 0 then t.left else t.right))
	 Indeed, the type-checker is unable to figure out the desired type of
	 the conditional sub-expression; it reports a resource allocation
	 conflict. In fact, if we wanted to explicitly declare this type,
	 I believe that we would need a magic wand: this sub-expression
	 produces a result [s] together with the permissions [s @ tree k a]
	 and [s @ tree k a -* t @ tree k a]. *)
      else if c < 0 then find (cmp, x, t.left)
      else find (cmp, x, t.right)
  end

(* The above [find] function requires [a] to be duplicable. Another approach
   is to parameterize [find] with a [copy] function that is able to copy an
   element of type [a]. In fact, the [copy] function need not have type [a -> a].
   Several generalizations are possible. First, we can allow [copy] to have type
   [a -> b], which means that the function is not constrained to just copy the
   data, but can use it in an arbitrary manner to produce data of type [b]. For
   this reason, the client-provided function will be called [use], rather than
   [copy]. Second, the function [use] can have type [(consumes a) -> (a, b)],
   which means that in addition to producing some output of type [b], the client
   can also request that the map be updated with a new value of type [a]
   at this key. Last, the function [use] can be allowed to have an arbitrary
   side effect at some permission [p]. This leads us to the following function,
   [update], a generalization of [find]. *)

val rec update
  [k, a, b, p : perm]
  (cmp: (k, k) -> int, 
   use: (consumes a | p) -> (a, b),
   x: k, t: tree k a | p) : option b =
  match t with
  | Empty ->
      none
  | Node ->
      let c = cmp (x, t.key) in
      if c = 0 then begin
	let (new_value, output) = use t.value in
	t.value <- new_value;
	some output
      end
      else if c < 0 then update (cmp, use, x, t.left)
      else update (cmp, use, x, t.right)
  end

val rec mem [k, a] (cmp: (k, k) -> int, x: k, t: tree k a) : bool =
  match t with
  | Empty ->
      False
  | Node ->
    let c = cmp (x, t.key) in
    if c = 0 then
      True
    else if c < 0 then
      mem (cmp, x, t.left)
    else
      mem (cmp, x, t.right)
  end

(* -------------------------------------------------------------------------- *)

(* Minimum and maximum elements. *)

(* Because [min_binding] returns a binding but does not remove it from the
   tree, it is restricted to duplicable keys and values. *)

(* [min_binding] is defined first for non-empty trees, then extended to empty
   trees. *)

val rec min_binding
  [k, a] duplicable k, duplicable a =>
  (t : Node { left: tree k a; key: k; value: a; right: tree k a; height: int })
  : (k, a) =
  match t.left with
  | Empty ->
      t.key, t.value
  | Node ->
      min_binding t.left
  end

val min_binding
  [k, a] duplicable k, duplicable a =>
  (t : tree k a)
  : option (k, a) =
  match t with
  | Empty ->
      none
  | Node ->
      some (min_binding t)
  end

val rec max_binding
  [k, a] duplicable k, duplicable a =>
  (t : Node { left: tree k a; key: k; value: a; right: tree k a; height: int })
  : (k, a) =
  match t.right with
  | Empty ->
      t.key, t.value
  | Node ->
      max_binding t.right
  end

val max_binding
  [k, a] duplicable k, duplicable a =>
  (t : tree k a)
  : option (k, a) =
  match t with
  | Empty ->
      none
  | Node ->
      some (max_binding t)
  end

(* [extract_min_binding] extracts the node that contains the minimum key.
   It returns both this node (which can be re-used) and the remaining,
   re-organized tree. By convention, instead of returning a pair, we
   return a single node, which contains the minimum key, and whose
   right child is the remaining tree. *)

val rec extract_min_binding
  [k, a]
  (consumes t : Node { left: tree k a; key: k; value: a; right: tree k a; height: int })
  :             Node { left:    Empty; key: k; value: a; right: tree k a; height: int }
  =
  match t.left with
  | Empty ->
      (* The desired node is [t], and the sub-tree [t.right] is what remains. *)
      t
  | Node ->
      (* Extract the minimum node out of the left sub-tree. *)
      let node = extract_min_binding t.left in
      (* Update in place the left sub-tree. *)
      t.left <- node.right;
      (* Perform a rotation at the root if required, and return. *)
      node.right <- bal t;
      node
  end

val rec extract_max_binding
  [k, a]
  (consumes t : Node { left: tree k a; key: k; value: a; right: tree k a; height: int })
  :             Node { left: tree k a; key: k; value: a; right:    Empty; height: int }
  =
  match t.right with
  | Empty ->
      t
  | Node ->
      let node = extract_max_binding t.right in
      t.right <- node.left;
      node.left <- bal t;
      node
  end

(* The private function [add_min_binding] takes a tree node whose only
   relevant fields are [key] and [value]. The [left] field is supposed
   to contain [Empty]. The [right] and [height] fields are irrelevant.
   This node is inserted into the tree [t], where it is expected to
   become the new minimum node. *)

val rec add_min_binding [k, a]
  (consumes node: Node { left: Empty; key: k; value: a; right: unknown; height: unknown },
   consumes t: tree k a) : tree k a =
  match t with
  | Empty ->
      (* Turn [node] into a singleton tree. *)
      node.right <- t; (* re-use the memory block at [t], which is [Empty] *)
      node.height <- 1;
      node
  | Node ->
      t.left <- add_min_binding (node, t.left);
      bal t
  end

val rec add_max_binding [k, a]
  (consumes node: Node { left: unknown; key: k; value: a; right: Empty; height: unknown },
   consumes t: tree k a) : tree k a =
  match t with
  | Empty ->
      (* Turn [node] into a singleton tree. *)
      node.left <- t; (* re-use the memory block at [t], which is [Empty] *)
      node.height <- 1;
      node
  | Node ->
      t.right <- add_max_binding (node, t.right);
      bal t
  end

(* -------------------------------------------------------------------------- *)

(* Removal. *)

(* The private function [merge] combines two trees that have almost equal
   heights. *)

val merge [k, a] (consumes t1: tree k a, consumes t2: tree k a) : tree k a =
  match t1, t2 with
  | Empty, t -> t
  | t, Empty -> t
  | Node, Node ->
      (* Extract the minimum node out of [t2]... *)
      let root = extract_min_binding t2 in
      (* And re-use this node to become the new root. *)
      root.left <- t1;
      bal root
  end

(* Compared with OCaml's [remove], our [remove] function combines [find]
   and [remove]. The binding that was removed is returned via a reference,
   whereas the new tree is returned as a function result. *)

(* [dst] is an out-parameter, just like in C, except here, we get a type
   error if we forget to write it! *)

(* TEMPORARY we could avoid writes and calls to [bal] when nothing is
   removed *)

val rec remove [k, a] (
  cmp: (k, k) -> int,
  x: k,
  consumes t: tree k a,
  consumes dst: ref unknown
) : (tree k a | dst @ ref (option (k, a)))
  =
  match t with
  | Empty ->
      dst := none;
      t
  | Node ->
      let c = cmp (x, t.key) in
      if c = 0 then begin
	dst := some (t.key, t.value);
	merge (t.left, t.right)
      end
      else if c < 0 then begin
	t.left <- remove (cmp, x, t.left, dst);
	bal t
      end
      else begin
	t.right <- remove (cmp, x, t.right, dst);
	bal t
      end
  end

(* -------------------------------------------------------------------------- *)

(* Iteration. *)

(* Compared with OCaml's [iter], our [iter] function is generalized
   to allow early termination. The client function, [f], is allowed
   to return a Boolean flag, which indicates whether iteration should
   continue. The function [iter] itself returns a Boolean outcome
   which indicates whether iteration was performed all the way to the
   end. *)

(* This feature implies that the type of the collection elements cannot
   be modified. Our version of [fold] (below) makes the converse choices:
   early termination is not possible, but the type of the elements can be
   changed from [a1] to [a2]. *)

(* In fact, our [iter] is exactly OCaml's [for_all]. (Except that the
   evaluation order is not the same; OCaml's [iter] guarantees that
   the keys are visited in increasing order, where OCaml's [for_all]
   does not.) Funny -- I never explicitly thought of [for_all] as a
   version of [iter] that has an early termination feature. *)

val rec iter [k, a, p : perm] (
  f: (k,           a | p) -> bool,
         t: tree k a | p)  : bool =
  match t with
  | Empty ->
      True
  | Node ->
      (* TEMPORARY this could be very concisely written using && *)
      if iter (f, t.left) then
	if f (t.key, t.value) then
	  iter (f, t.right)
	else False
      else False
  end

(* -------------------------------------------------------------------------- *)

(* Map. *)

(* Our [map] is modeled after OCaml's [mapi]. One could in fact offer
   even more generality by allowing keys to be copied/translated, as
   long as the key ordering is preserved. *)

val rec map [k, a1, a2, b, p : perm] duplicable k => (
  f: (k, consumes d:        a1 | p) -> (b        | d @        a2),
         consumes t: tree k a1 | p)  : (tree k b | t @ tree k a2) =
  match t with
  | Empty ->
      Empty
  | Node ->
      Node {
	left = map (f, t.left);
	key = t.key;
	value = f (t.key, t.value);
	right = map (f, t.right);
	height = t.height
      }
  end

(* -------------------------------------------------------------------------- *)

(* Fold. *)

(* The two [fold] functions have the same type, but differ in the order
   in which the tree is visited. *)

val rec fold_ascending [k, a1, a2, b, p : perm] (
  f: (k, consumes d:        a1, consumes accu: b | p) -> (b | d @        a2),
         consumes t: tree k a1, consumes accu: b | p)  : (b | t @ tree k a2) =
  match t with
  | Empty ->
      accu
  | Node ->
      let accu = fold_ascending (f, t.left, accu) in
      let accu = f (t.key, t.value, accu) in
      let accu = fold_ascending (f, t.right, accu) in
      accu
  end

val rec fold_descending [k, a1, a2, b, p : perm] (
  f: (k, consumes d:        a1, consumes accu: b | p) -> (b | d @        a2),
         consumes t: tree k a1, consumes accu: b | p)  : (b | t @ tree k a2) =
  match t with
  | Empty ->
      accu
  | Node ->
      let accu = fold_descending (f, t.right, accu) in
      let accu = f (t.key, t.value, accu) in
      let accu = fold_descending (f, t.left, accu) in
      accu
  end

(* -------------------------------------------------------------------------- *)

(* The private function [join] has the same specification as [bal], except
   the left and right sub-trees may have arbitrary heights. *)

val rec join [k, a] (
  consumes t: Node { left: tree k a; key: k; value: a; right: tree k a; height: unknown }
) : tree k a =
  let left, right = t.left, t.right in
  match t.left, t.right with
  | Empty, _ ->
      add_min_binding (t, right)
  | _, Empty ->
      add_max_binding (t, left)
  | Node, Node ->
      if left.height > right.height + 2 then begin
	(* The left node becomes the root. *)
	(* The root node becomes the right child. *)
	t.left <- left.right;
	left.right <- join t;
	bal left
      end
      else if right.height > left.height + 2 then begin
	t.right <- right.left;
	right.left <- join t;
	bal right
      end
      else begin
	update_height t;
	t
      end
  end

(* -------------------------------------------------------------------------- *)

(* The private function [concat] concatenates two trees of arbitrary heights.
   It is identical to [merge], except it calls [join] instead of [bal]. *)

val concat [k, a] (consumes t1: tree k a, consumes t2: tree k a) : tree k a =
  match t1, t2 with
  | Empty, t -> t
  | t, Empty -> t
  | Node, Node ->
      let root = extract_min_binding t2 in
      root.left <- t1;
      join root
  end

(* -------------------------------------------------------------------------- *)

(* The private function [split] splits at a certain key. It returns a tree
   whose root node may or may not contain a value: note that the field
   [value] has type [option a] in the result type. This allows us to almost
   completely avoid memory allocation (and it is a natural thing to do anyway). *)

val rec split [k, a] (cmp: (k, k) -> int, x: k, consumes t: tree k a)
  : Node { left: tree k a; key: unknown; value: option a; right: tree k a; height: unknown } =
  match t with
  | Empty ->
      (* Allocate a new node, containing no value, and whose sub-trees are empty. *)
      Node { left = Empty; key = (); value = none; right = t; height = () }
  | Node ->
      let c = cmp (x, t.key) in
      if c = 0 then begin
	(* We found the desired key. *)
	t.value <- some t.value; (* ah ha! look at this, feeble ML programmers *)
	t
      end
      else if c < 0 then begin
        let root = split (cmp, x, t.left) in
	t.left <- root.right;
	root.right <- join t;
	root
      end
      else begin
        let root = split (cmp, x, t.right) in
	t.right <- root.left;
	root.left <- join t;
	root
      end
  end

(* -------------------------------------------------------------------------- *)

(* The private function [concat_or_join] accepts a tree whose root node may or
   may not contain a value, and turns it intro a tree, using either [join] or
   [concat]. Thus, the left and right sub-trees are allowed to have arbitrary
   heights. *)

val concat_or_join [k, a] (consumes t: Node { left: tree k a; key: k; value: option a; right: tree k a; height: unknown }) : tree k a =
  match t.value with
  | Some { contents = d } ->
      t.value <- d;
      join t
  | None ->
      concat (t.left, t.right)
  end

(* -------------------------------------------------------------------------- *)

(* Merging. *)

(* This function has the same specification as its OCaml counterpart. *)

val rec merge [k, a, b, c] (
  cmp: (k, k) -> int,
  f: (k, consumes option a, consumes option b) -> option c,
  consumes s1: tree k a,
  consumes s2: tree k b
) : tree k c =
  match s1, s2 with
  | Empty, Empty ->
      s1
  | _, _ ->
      if height s1 >= height s2 then
	match s1 with
	| Node ->
	    let root2 = split (cmp, s1.key, s2) in
	    root2.left <- merge (cmp, f, s1.left, root2.left);
	    root2.key <- s1.key;
	    root2.value <- f (s1.key, some s1.value, root2.value);
	    root2.right <- merge (cmp, f, s1.right, root2.right);
	    concat_or_join root2
        | Empty ->
	    fail (* impossible *)
        end
      else
	match s2 with
	| Node ->
	    let root1 = split (cmp, s2.key, s1) in
	    root1.left <- merge (cmp, f, root1.left, s2.left);
	    root1.key <- s2.key;
	    root1.value <- f (s2.key, root1.value, some s2.value);
	    root1.right <- merge (cmp, f, root1.right, s2.right);
	    concat_or_join root1
        | Empty ->
	    fail (* impossible *)
        end
  end

(* -------------------------------------------------------------------------- *)

(* Compared to OCaml's [filter], our [filter] is more general. Instead of
   returning a Boolean value, the function [p] returns an option. This
   allows us not only to drop certain entries, but also to modify the
   existing entries, and possibly to change their type. *)

val rec filter [k, a, b] (
  p: (k, consumes a) -> option b,
  consumes t: tree k a
) : tree k b =
  match t with
  | Empty ->
      t
  | Node ->
      t.left <- filter (p, t.left);
      t.value <- p (t.key, t.value);
      t.right <- filter (p, t.right);
      concat_or_join t
  end

(* The function [partition] is generalized in a similar manner. Instead
   of returning a Boolean value, it returns a choice. *)

val rec partition [k, a, b, c] (
  p: (k, consumes a) -> choice b c,
  consumes t: tree k a
) : (tree k b, tree k c) =
  match t with
  | Empty ->
      t, Empty
  | Node ->
      let ll, lr = partition (p, t.left) in
      let choice = p (t.key, t.value) in
      let rl, rr = partition (p, t.right) in
      match choice with
      | Left ->
	  t.left <- ll;
	  t.value <- choice.contents;
	  t.right <- rl;
	  join t, concat (lr, rr)
      | Right ->
	  t.left <- lr;
	  t.value <- choice.contents;
	  t.right <- rr;
	  concat (ll, rl), join t
      end
      (* TEMPORARY why do I get a warning about this merge? isn't the expected type
	 propagated all the way down? *)
  end

(* -------------------------------------------------------------------------- *)

(* Iterators. *)

(* OCaml's [Map] library uses iterators in order to implement the comparison
   of two trees. It implements an iterator as a list of trees. Unfortunately,
   as of now, ordinary tree iterators are difficult to express in Mezzo,
   because it is hard to explain how/why the ownership of the tree cells (and
   keys, and values) is returned from the iterator to the tree once iteration
   is complete. *)

(* Mutable zippers allow building a form of tree iterators that have the key
   feature that the memory footprint of the iterator is exactly the memory
   footprint of the original tree. Hence, keeping track of ownership is simpler
   in this approach. *)

mutable data zipper k a =
  | ZEmpty
  | ZLeft  { father: zipper k a; key: k; value: a; right: tree k a;    height: int }
  | ZRight { left: tree k a;     key: k; value: a; father: zipper k a; height: int }

(* In this approach, an iterator is a pair of a zipper and a tree, together
   with a tag that indicates whether we are arriving at this node, currently
   paused at this node, or leaving this node. Furthermore, an iterator can
   be paused only at a binary node -- never at an empty node. *)

mutable data iterator k a =
  | IArriving { context: zipper k a; focus: tree k a }
  | IAt       { context: zipper k a; focus: Node { left: tree k a; key: k; value: a; right: tree k a; height: int }}
  | ILeaving  { context: zipper k a; focus: tree k a }

(* The function [advance] advances an iterator until either it reaches a new
   element (in which case the iterator is left in state [IAt]) or there are no
   more elements (in which case the iterator is left in state [ILeaving], with
   an [Empty] tree). Initially, the iterator can be in any state; if it is
   initially in state [IAt], then it will advance to the next element. *)

val rec advance [k, a] (i: iterator k a) : () =
  match i with
  | IArriving { context = z; focus = f } ->
      match f with
      | Empty ->
	  (* Skip empty nodes. *)
	  tag of i <- ILeaving;
	  advance i
      | Node { left } ->
	  (* When arriving at a node, descend immediately into the left child. *)
	  tag of f <- ZLeft;
	  f.father <- z;
	  (* [f] is now a zipper! *)
	  i.context <- f;
	  i.focus <- left;
	  advance i
        end
  | IAt { context = z; focus = f } ->
      let right = f.right in
      (* After handling a node, descend into its right child. *)
      tag of f <- ZRight;
      f.father <- z;
      (* [f] is now a zipper! *)
      tag of i <- IArriving;
      i.context <- f;
      i.focus <- right;
      advance i
  | ILeaving { context = z; focus = f } ->
      match z with
      | ZEmpty ->
	  (* We are finished. *)
	  ()
      | ZLeft { father } ->
	  tag of z <- Node;
	  z.left <- f;
	  (* [z] is now a tree! *)
	  (* After exiting a left child, pause at its father. *)
	  tag of i <- IAt;
	  i.context <- father;
	  i.focus <- z
      | ZRight { father } ->
	  tag of z <- Node;
	  z.right <- f;
	  (* [z] is now a tree! *)
	  (* After exiting a right child, continue in ascending mode. *)
	  i.context <- father;
	  i.focus <- z;
	  advance i
      end
  end

(* Our iterators are unsatisfactory in that [advance] returns an internal
   representation of the iterator, instead of a nicely packaged pair of an
   element and a new iterator. For the time being, this is ok, because we are
   using the iterators only internally. TEMPORARY *)

(* [iterate] turns a tree into a fresh iterator. *)

val iterate [k, a] (consumes t: tree k a) : iterator k a =
  let i = IArriving { context = ZEmpty; focus = t } in
  advance i;
  i

(* [stop] turns an iterator back into a complete tree. *)

val rec stop [k, a] (consumes i: iterator k a) : tree k a =
  match i with
  | IAt { context = z; focus = f } ->
      match z with
      | ZEmpty ->
	  f
      | ZLeft { father } ->
	  tag of z <- Node;
	  z.left <- f;
          (* [z] is now a tree! *)
	  i.context <- father;
	  i.focus <- z;
	  stop i
      | ZRight { father } ->
	  tag of z <- Node;
	  z.right <- f;
          (* [z] is now a tree! *)
	  i.context <- father;
	  i.focus <- z;
	  stop i
      end
  | ILeaving { context = ZEmpty; focus = f } ->
      f
  | _ ->
      fail (* impossible, if iterator has been properly [advance]d *)
  end

(* [recover] stops the iterator [i] and dynamically checks that the resulting
   tree is equal to the argument [t]. This dynamic check is required for the
   moment. Assigning more precise types to our iterators might allow us to
   avoid it. TEMPORARY *)

val recover [k, a] (consumes i: iterator k a, t: unknown) : (| t @ tree k a) =
  let u = stop i in
  if t == u then
    ()
  else
    fail

(* -------------------------------------------------------------------------- *)

(* We use an iterator to implement the comparison of two trees. *)

val compare [k, a] (
  cmpk: (k, k) -> int,
  cmpa: (a, a) -> int,
  m1: tree k a,
  m2: tree k a
) : int =
  
  (* Create an iterator for each of the trees. *)
  let i1 = iterate m1
  and i2 = iterate m2 in

  (* Loop. *)
  let rec loop (| i1 @ iterator k a * i2 @ iterator k a) : int =
    match i1, i2 with
    | IAt { focus = m1 }, IAt { focus = m2 } ->
	let c = cmpk (m1.key, m2.key) in
	if c <> 0 then c else begin
	  let c = cmpa (m1.value, m2.value) in
	  if c <> 0 then c else begin
	    advance i1;
	    advance i2;
	    loop()
	  end
	end
    | IAt, _ ->
	(* The sequence [i1] is longer. *)
        1
    | _, IAt ->
	(* The sequence [i2] is longer. *)
        -1
    | _, _ ->
	(* The comparison suceeded, all the way. *)
	0
    end

  in
  let c : int = loop() in
  (* Stop the iterators and recover the permissions for the trees. *)
  recover (i1, m1);
  recover (i2, m2);
  c
  (* BUG well, not a bug, but a feature wish: if I omit the calls to
     recover above, I get a good error message, but with a completely
     useless location (the entire function body). Since we are
     propagating expected types down, couldn't we signal the error
     message at the sub-expression "c" (final line), instead of at
     the level of the entire function? *)

(* -------------------------------------------------------------------------- *)

(* As a test of the type-checker, we re-implement [iter] using iterators. *)

val iter_variant [k, a, p : perm] (
  f: (k,           a | p) -> bool,
         t: tree k a | p)  : bool =

  (* Create an iterator. *)
  let i = iterate t in
  (* Loop. *)
  let rec loop (| i @ iterator k a * p) : bool =
    match i with
    | IAt { focus = m } ->
        (* TEMPORARY this could be very concisely written using && *)
        if f (m.key, m.value) then loop() else False
    | _ ->
        True
    end
  in
  (* Stop the iterator and recover the permission for the tree. *)
  let outcome : bool = loop() in
  recover (i, t);
  outcome

(* -------------------------------------------------------------------------- *)

(* Iterators in another style. *)

(* A bandit is a binary tree node that has no left child. *)

(* The following type describes a list of bandits. *)

(* TEMPORARY because we don't have type abbreviations, we redefine this type
   instead of using an abbreviation for a list of bandits. *)

data bandits k a =
  | End
  | More {
      head: Node { left: dynamic; key: k; value: a; right: tree k a; height: int };
      tail: bandits k a
  }

(* An enumeration is basically a reference to a list of bandits. Furthermore,
   an enumeration object is able to adopt the tree nodes that have already
   been visited. The nodes that are adopted are isolated, i.e. they do not
   own their children; this forces us (unfortunately) to redefine a new type
   of tree nodes that do not own their children. *)

(* TEMPORARY perhaps we could plan ahead and parameterize the type of tree
   nodes with the type of their children before tying the recursive knot?
   but that would require a recursive type abbreviation, I am afraid *)

mutable data enumeration k a =
  Enum { bandits: bandits k a } adopts visited k a

mutable data visited k a =
  | VisitedEmpty
  | VisitedNode { left: dynamic; key: k; value: a; right: dynamic; height: int }

(* This smart constructor [cons]es a tree in front of a list of bandits. The
   left spine of the tree is walked down all the way, so that the nodes that
   are effectively insert into the list are bandits. *)

val rec cons_bandits [k, a] (consumes t: tree k a, e: enumeration k a) : () =
  match t with
  | Empty ->
      tag of t <- VisitedEmpty; (* this is a no-op *)
      give t to e
  | Node ->
      e.bandits <- More { head = t; tail = e.bandits };
      cons_bandits (t.left, e)
  end

val new_enum [k, a] (consumes t: tree k a) : enumeration k a =
  let e = Enum { bandits = End } in
  cons_bandits (t, e);
  e

val consume_enum [k, a] (e: enumeration k a) : () =
  match e.bandits with
  | More { head; tail } ->
      e.bandits <- tail;
      cons_bandits (head.right, e);
      tag of head <- VisitedNode; (* this is a no-op *)
      give head to e
  | End ->
      fail
      (* TEMPORARY we could eliminate this case if we declared that initially
	 [e] has type Enum { bandits: More { ... } }
	 but this will require an explicit adopts clause in a structural type *)
  end

(* The following function reconstructs the ownership of the original tree after
   the enumeration has stopped. We are in a situation where the tree nodes that
   have already been visited have been adopted by the enumeration object, whereas
   the tree nodes that have not yet been visited are listed, *in order*, as part
   of the list [e.bandits]. A dynamic ownership test is used to distinguish these
   two situations. Yes, this is quite crazy, and I am not even sure that it works. *)

val rec reconstruct [k, a] (t: dynamic, e: enumeration k a) : (| t @ tree k a) =
  if e owns t then begin
    take t from e;
    match t with
    | VisitedEmpty ->
        tag of t <- Empty (* this is a no-op *)
    | VisitedNode ->
        tag of t <- Node; (* this is a no-op *)
        reconstruct (t.left, e);
	reconstruct (t.right, e)
    end
  end
  else
    match e.bandits with
    | End ->
        fail (* impossible *)
    | More { head; tail } ->
        if head == t then begin
	  (* At this point, [t] is a bandit, a tree node that does not own
	     its left child. We need to reconstruct this left child in order
	     to obtain [t @ tree k a]. *)
	  e.bandits <- tail;
	  reconstruct (t.left, e)
	end
	else
	  fail (* impossible *)
	  (* TEMPORARY I need to think more about the order of the non-visited
	     trees in e.bandits; I am afraid they will *not* appear in the
	     desired order, so the test [head == t] *WILL* FAIL! *)
    end

(* We use an enumeration to implement the comparison of two trees. *)

val compare_variant [k, a] (
  cmpk: (k, k) -> int,
  cmpa: (a, a) -> int,
  consumes m1: tree k a,
  consumes m2: tree k a
) : int =
  
  (* Create an enumeration for each of the trees. *)
  let e1 = new_enum m1
  and e2 = new_enum m2 in

  (* Loop. *)
  let rec loop (| e1 @ enumeration k a * e2 @ enumeration k a) : int =
    match e1.bandits, e2.bandits with
    | More { head = m1 }, More { head = m2 } ->
	let c = cmpk (m1.key, m2.key) in
	if c <> 0 then c else begin
	  let c = cmpa (m1.value, m2.value) in
	  if c <> 0 then c else begin
	    consume_enum e1;
	    consume_enum e2;
	    loop()
	  end
	end
    | More, End ->
	(* The sequence [i1] is longer. *)
        1
    | End, More ->
	(* The sequence [i2] is longer. *)
        -1
    | End, End ->
	(* The comparison suceeded, all the way. *)
	0
    end

  in
  loop()

(* -------------------------------------------------------------------------- *)

(* Conversion of a tree to a list. *)

(* BUG All permissions should be in expanded form *)
(* 
val bindings [k, a] duplicable k, duplicable a => (t: tree k a) : list::list (k, a) =
  let f (x: k, v: a, accu: list::list (k, a)) : list::list (k, a) =
    list::cons ((x, v), accu)
  in
  fold_descending (* [k, a, a, list::list (k, a), empty] *) (f, t, list::nil)
*)

(* -------------------------------------------------------------------------- *)
(* -------------------------------------------------------------------------- *)

(* We now wrap the type [tree] in another type, [treeMap], which the client
   will work with. There are two reasons for doing so. One is that this allows
   some functions, such as [add], to return unit instead of returning a new
   data structure. The other is that this allows us to store the comparison
   function. *)

mutable data treeMap k (c : term) a =
  TreeMap { tree: tree k a; cmp: =c | c @ (k, k) -> int }

val cardinal [k, c : term, a] (m: treeMap k c a) : int =
  cardinal m.tree

(* -------------------------------------------------------------------------- *)

(* Creating an empty map requires supplying a comparison function [cmp],
   which is stored within the new data structure. *)

val create [k, a] (cmp: (k, k) -> int) : treeMap k cmp a =
  TreeMap { tree = create(); cmp }

val singleton [k, a] (cmp: (k, k) -> int, consumes x: k, consumes d: a): treeMap k cmp a =
  TreeMap { tree = singleton (x, d); cmp }

val is_empty [k, c: term, a] (m : treeMap k c a) : bool =
  is_empty m.tree

val add [k, c: term, a] (
  consumes x: k,
  consumes d: a,
  m: treeMap k c a
) : () =
  m.tree <- add (m.cmp, x, d, m.tree)

val find [k, c: term, a] duplicable a => (
  x: k,
  m: treeMap k c a
) : option a =
  find (m.cmp, x, m.tree)

val update [k, c: term, a, b, p : perm] (
  use: (consumes a | p) -> (a, b),
  x: k,
  m: treeMap k c a
| p
) : option b =
  update (m.cmp, use, x, m.tree)

val mem [k, c: term, a] (x: k, m: treeMap k c a) : bool =
  mem (m.cmp, x, m.tree)

val min_binding [k, c: term, a] duplicable k, duplicable a => (m : treeMap k c a) : option (k, a) =
  min_binding m.tree

val max_binding [k, c: term, a] duplicable k, duplicable a => (m : treeMap k c a) : option (k, a) =
  max_binding m.tree

val extract_min_binding [k, c: term, a] (m: treeMap k c a) : option (k, a) =
  match m.tree with
  | Empty ->
      none
  | Node ->
      let node = extract_min_binding m.tree in
      m.tree <- node.right;
      some (node.key, node.value)
  end

val extract_max_binding [k, c: term, a] (m: treeMap k c a) : option (k, a) =
  match m.tree with
  | Empty ->
      none
  | Node ->
      let node = extract_max_binding m.tree in
      m.tree <- node.left;
      some (node.key, node.value)
  end

val remove [k, c: term, a] (x: k, m: treeMap k c a) : option (k, a) =
  let dst = newref () in
  m.tree <- remove (m.cmp, x, m.tree, dst);
  !dst

val iter [k, c: term, a, p : perm] (
  f: (k,              a | p) -> bool,
         m: treeMap k c a | p)  : bool =
  iter (f, m.tree)

val for_all =
  iter

(* [exists] could be implemented directly, but an implementation in
   terms of [for_all] is preferred, as a test of the type-checker. *)

val exists [k, c: term, a, p : perm] (
  f: (k,              a | p) -> bool,
         m: treeMap k c a | p)  : bool =
  let notf (key: k, value: a | p) : bool =
    not (f (key, value))
  in
  not (for_all (notf, m))

val map [k, c: term, a1, a2, b, p : perm] duplicable k => (
  f: (k, consumes d:           a1 | p) -> (b           | d @           a2),
         consumes m: treeMap k c a1 | p)  : (treeMap k c b | m @ treeMap k c a2) =
  TreeMap { tree = map (f, m.tree); cmp = m.cmp }

(* [copy] could be defined directly, but is here defined as a special case of [map]. *)

val copy [k, c: term, a, b] duplicable k => (f: a -> b, m: treeMap k c a) : treeMap k c b =
  let g (x: k, d: a) : b = f d in
  map (g, m)

val fold_ascending [k, c: term, a1, a2, b, p : perm] (
  f: (k, consumes d:           a1, consumes accu: b | p) -> (b | d @           a2),
         consumes m: treeMap k c a1, consumes accu: b | p)  : (b | m @ treeMap k c a2) =
  fold_ascending (f, m.tree, accu)

val fold_descending [k, c: term, a1, a2, b, p : perm] (
  f: (k, consumes d:           a1, consumes accu: b | p) -> (b | d @           a2),
         consumes m: treeMap k c a1, consumes accu: b | p)  : (b | m @ treeMap k c a2) =
  fold_descending (f, m.tree, accu)

val fold =
  fold_ascending

val merge [k, cmp: term, a, b, c] (
  f: (k, consumes option a, consumes option b) -> option c,
  consumes m1: treeMap k cmp a,
  consumes m2: treeMap k cmp b
) : treeMap k cmp c =
  m1.tree <- merge (m1.cmp, f, m1.tree, m2.tree);
  m1

val split [k, c: term, a] (
  x: k,
  consumes m: treeMap k c a
) : (treeMap k c a, option a, treeMap k c a) =
  let root = split (m.cmp, x, m.tree) in
  m.tree <- root.left;
  m, root.value, TreeMap { tree = root.right; cmp = m.cmp }

val filter [k, c: term, a, b] (
  p: (k, consumes a) -> option b,
  consumes m: treeMap k c a
) : treeMap k c b =
  m.tree <- filter (p, m.tree);
  m

val partition [k, cmp: term, a, b, c] (
  p: (k, consumes a) -> choice b c,
  consumes m: treeMap k cmp a
) : (treeMap k cmp b, treeMap k cmp c) =
  let left, right = partition (p, m.tree) in
  m.tree <- left;
  m, TreeMap { tree = right; cmp = m.cmp }

val compare [k, c: term, a] (
  cmpk: (k, k) -> int,
  cmpa: (a, a) -> int,
  m1: treeMap k c a,
  m2: treeMap k c a
) : int =
  compare (cmpk, cmpa, m1.tree, m2.tree)

val equal [k, c: term, a] (
  cmpk: (k, k) -> int,
  cmpa: (a, a) -> int,
  m1: treeMap k c a,
  m2: treeMap k c a
) : bool =
  compare (cmpk, cmpa, m1, m2) = 0

(* TEMPORARY bindings *)
(* TEMPORARY compare .mzi file with map.mli *)

(*
Local Variables:
compile-command: "../mezzo mutableTreeMap.mz"
End:
*)
