open wref

(* The identity function. We use a permission of the form [id @ b -> a]
   to encode the fact that [b] is a subtype of [a], and we use the
   function application [id x] when we wish to exploit this fact.
   This is a clumsy encoding, but it provides a proof-of-concept. *)

(* No consumes keyword is required here, because we are dealing with
   duplicable types. *)

val id [a] (consumes x: a) : a =
  x

(* A suspension is either evaluated already or still suspended.
   In the former case, it contains just a result, of type [a].
   In the latter case, it contains the function [f] that was
   passed to [create], together with the permission [p] that
   [f] needs. This permission is existentially quantified. In
   other words, [f] is a one-shot function. *)

data state a =
  | Evaluated { result: a }
  | Suspended { computation: {p: perm} ((|consumes p) -> a | p) }

(* The state of a suspension is stored in a weak reference. The
   lock (which is part of the weak reference) ensures that the
   state of the suspension remains consistent even in the face
   of concurrent accesses. It also allows us to implement waiting
   until a result becomes available. *)

(* The existential quantification over [b], which is a subtype of
   [a], is used to make [thunk] covariant in its parameter [a]. *)

(* We might wish to store the information [duplicable a] as part
   of the definition of [thunk a]. This would allow us to remove
   the assumption [duplicable a => ...] in the type of [force].
   However, if we do that, [thunk] is no longer covariant in [a]!
   Subtle. But, actually, the constraint [id @ b -> a] encodes
   the fact that [b] is duplicable! So we can get rid of this
   assumption in the type of [force]. *)

alias thunk +a =
  {b} (wref (state b) | id @ b -> a)

(* Creation. *)

(* The constraint [duplicable a] is required at construction time
   in order to construct a witness of [id @ a -> a]. *)

val create [a, p : perm] duplicable a => (
  f: (|consumes p) -> a
| consumes p
) : thunk a =
  let s : state a = Suspended { computation = f } in
  new [state a] s

(* A custom unpacking function. This is another shortcoming of the
   system; if we had a generic mechanism for naming the variable
   that is introduced when an existential is unpacked, we would
   not need this. *)

val unpack [a, c] (
  x: {b} (wref (state b) | id @ b -> a),
  f: [b] (wref (state b) | id @ b -> a) -> c
) : c =
  f x

(* Evaluation. *)

(* Using [wref::update] means that we hold the lock while the call to
   [s.computation] is in progress. As a result, if two calls to [force]
   occur concurrently, the second call will block until the first call
   is finished and has produced a result. This is the desired behavior. *)

(* We do not need to explicitly require [duplicable a] because the
   constraint [id @ b -> a] actually encodes the fact that [b] is
   duplicable! Subtle. *)

val force [a] (t: thunk a) : a =
  (* Unpack the existential, and let [b] stand for the witness. *)
  unpack (t, fun [b] (x: wref (state b) | id @ b -> a) : a =
    (* We get access to [t], under the name [x], at type
       [wref (state b)], where [b] is an unknown subtype of [a],
       as witnessed by the permission [id @ b -> a]. *)
    update (x, fun (consumes s: state b) : (state b, a) =
      (* We will now possibly update [x], by writing a new value
	 of type [state b] into it, and return a result of type
	 [b], which, by applying [id], we coerce to type [a]. *)
      match s with
      | Evaluated ->
	  s, (id s.result)
      | Suspended ->
	  let result : b = s.computation() in
	  Evaluated { result = result }, id result
      end
    )
  )

(*
Local Variables:
compile-command: "../mezzo lazy.mz"
End:
*)
