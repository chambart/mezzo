(* -------------------------------------------------------------------------- *)

(* The standard definition of immutable lists. *)

(* LIST_DEF *)
data list a =
  | Nil
  | Cons { head: a; tail: list a }
(* LIST_DEF *)

(* -------------------------------------------------------------------------- *)

(* A definition for a list cell whose [tail] field has not yet been
   initialized. Such a cell is mutable, and can be frozen (turned
   into an immutable list cell) via a tag update instruction. *)

(* XLIST_DEF *)
data mutable xlist a =
  | XNil
  | XCons { head: a; tail: () }

alias xcons a =
    XCons { head: a; tail: () }
(* XLIST_DEF *)

(* The following function writes [xs] into [c.tail] and declares
   that [c] is now immutable. *)

(* Note: in order to ensure that the tag update instruction does
   nothing at runtime and can be erased, we need [XCons] and [Cons]
   to translate to the same tag number. This explains why we define
   a tag [XNil], even though we never use it. *)

val freeze [a] (consumes c: xcons a, xs: unknown) : (| c @ Cons { head: a; tail = xs }) =
  c.tail <- xs;
  tag of c <- Cons

(* The type assigned to [freeze] faithfully reflects its behavior.
   We could think of a more readable type:
   val freeze [a] (consumes c: cell a, xs: list a) : (| c @ list a)
   This type is also valid, but is strictly less general, and it turns
   out that the extra generality is needed: when [xs] is written into
   [c.tail], [xs] is usually not yet a list. *)

(* -------------------------------------------------------------------------- *)

(* Short-hands for constructing lists. *)

val nil =
  Nil

alias cons_t a b = Cons { head: a; tail: b }

val cons [a] (consumes x: a, consumes xs: list a) : cons_t a (list a) =
  Cons { head = x; tail = xs }

val two [a] (consumes x1: a, consumes x2: a) : cons_t a (cons_t a Nil) =
  Cons { head = x1; tail = Cons { head = x2; tail = Nil }}

val three [a] (consumes x1: a, consumes x2: a, consumes x3: a) :
  cons_t a (cons_t a (cons_t a Nil)) =
  Cons { head = x1; tail = Cons { head = x2; tail = Cons { head = x3; tail = Nil }}}

val init [a, p : perm] (n : int, f : (int | p) -> a | p) : list a =
  let rec loop (i : int | p) : list a =
    if i = n then
      Nil
    else
      Cons { head = f i; tail = loop (i + 1) }
  in
  loop 0
 
(* -------------------------------------------------------------------------- *)

(* List length. *)

(* I am sure that not everybody will like this use of [if xs then ...]. I find
   it cute. Note that the access to [xs.tail] is safe! *)

val rec length_aux [a] (accu: int, xs: list a) : int =
  if xs then length_aux (accu + 1, xs.tail) else accu

val length [a] (xs: list a) : int =
  length_aux (0, xs)

(* -------------------------------------------------------------------------- *)

(* List head and tail. *)

(* These functions are likely to be of little use, but at least they are safe,
   unlike their ocaml counterparts. *)

val hd [a] (consumes xs: Cons { head: a; tail: unknown }) : a =
  xs.head

val tl [a] (consumes xs: Cons { head: unknown; tail: list a }) : list a =
  xs.tail

(* -------------------------------------------------------------------------- *)

(* Indexing operations. *)

val rec nth_aux [a] (consumes xs: list a, n: int) : a =
  if xs then
    if n = 0 then xs.head else nth_aux (xs.tail, n - 1)
  else
    fail

val nth [a] (consumes xs: list a, n: int) : a =
  if n < 0 then fail else nth_aux (xs, n)

val rec chop [a] (k: int, consumes xs: list a) : list a =
  if k = 0 then xs
  else if xs then chop (k - 1, xs.tail)
  else fail

(* This conventional, non-tail-recursive version of splitAt is here as a
   test of the type-checker. *)

val rec splitAt [a] (k: int, consumes xs: list a) : (list a, list a) =
  if k = 0 then
    Nil, xs
  else if xs then begin
    let prefix, suffix = splitAt (k - 1, xs.tail) in
    Cons { head = xs.head; tail = prefix }, suffix
  end
  else fail

(* This is a tail-recursive, destination-passing-style version of splitAt. *)

val rec splitAtAux [a] (k: int, consumes xs: list a, consumes c: xcons a) : (list a | c @ list a) =
  if k = 0 then begin
    freeze (c, Nil);
    xs
  end
  else if xs then begin
    let d = XCons { head = xs.head; tail = () } in
    freeze (c, d);
    splitAtAux (k - 1, xs.tail, d)
  end
  else fail

val splitAt [a] (k: int, consumes xs: list a) : (list a, list a) =
  if k = 0 then
    Nil, xs
  else if xs then begin
    let ys = XCons { head = xs.head; tail = () } in
    let zs = splitAtAux (k - 1, xs.tail, ys) in
    ys, zs
  end
  else fail
  (* TEMPORARY maybe it would be nice to also offer a version of splitAt
     that does not fail when [length xs] is smaller than [k] *)

(* -------------------------------------------------------------------------- *)

(* List concatenation and reversal. *)

(* A non-tail-recursive version of [append]. *)

(* LIST_APPEND *)
val rec append [a] (
  consumes xs: list a,
  consumes ys: list a
) : list a =
  if xs then
    Cons { head = xs.head; tail = append (xs.tail, ys) }
  else
    ys
(* LIST_APPEND *)

(* A tail-recursive version of [append], which uses auxiliary storage. *)

val rec rev_append [a] (consumes xs: list a, consumes ys: list a) : list a =
  if xs then
    rev_append (xs.tail, Cons { head = xs.head; tail = ys })
  else
    ys

val rev [a] (consumes xs: list a) : list a =
  rev_append (xs, Nil)

val append [a] (consumes xs: list a, consumes ys: list a) : list a =
  rev_append (rev xs, ys)

(* A tail-recursive version of [append], using no auxiliary storage, in
   destination-passing-style. *)

(* LIST_TAILREC_AUX_APPEND *)
val rec appendAux [a] (consumes (dst: xcons a, xs: list a, ys: list a))
: (| dst @ list a)
  =
  match xs with
  | Cons ->
      let dst' = XCons { head = xs.head; tail = () } in
      freeze (dst, dst');
      appendAux (dst', xs.tail, ys)
  | Nil ->
      freeze (dst, ys)
  end
(* LIST_TAILREC_AUX_APPEND *)

(* LIST_TAILREC_APPEND *)
val append [a] (consumes (xs: list a, ys: list a)) : list a =
  match xs with
  | Cons ->
      let dst = XCons { head = xs.head; tail = () } in
      appendAux (dst, xs.tail, ys);
      dst
  | Nil ->
      ys
  end
(* LIST_TAILREC_APPEND *)

(* -------------------------------------------------------------------------- *)

(* Flattening a list of lists. *)

val rec flatten [a] (consumes xss : list (list a)) : list a =
  if xss then
    append (xss.head, flatten xss.tail)
  else
    Nil

(* -------------------------------------------------------------------------- *)

(* Map. *)

(* The following type does allow the function [f] to perform a strong update
   on the argument list, whose type changes from [list a1] to [list a2]. A
   new list of type [list b] is produced. *)

val rec map [a1, a2, b, p : perm] (
      consumes xs: list a1,
  f: (consumes  x:      a1 | p) -> (     b |  x @      a2)
                        | p)  : (list b | xs @ list a2)
=
  if xs then
    Cons { head = f xs.head; tail = map (xs.tail, f) }
  else
    Nil

val rev_map [a1, a2, b, p : perm] (
      consumes xs: list a1,
  f: (consumes  x:      a1 | p) -> (     b |  x @      a2)
                        | p)  : (list b | xs @ list a2)
=
  let rec rev_map_aux (consumes accu: list b, consumes xs: list a1 | p) : (list b | xs @ list a2) =
    if xs then
      rev_map_aux (Cons { head = f xs.head; tail = accu }, xs.tail)
    else
      accu
  in
  rev_map_aux (Nil, xs)

(* -------------------------------------------------------------------------- *)

(* Iteration. *)

(* The following type allows the function [f] to perform a strong update
   on the argument list, whose type changes from [list a1] to [list a2].
   It also allows [f] to have a side effect at [p]. *)
 
val rec iter [a1, a2, p : perm] (
  consumes xs: list a1,
  f: (consumes x:  a1 | p)
         -> (| x @ a2)
| p
)    : (| xs @ list a2)
=
  if xs then begin
    f xs.head;
    iter (xs.tail, f)
  end

(* The following function should not be useful to the client, who can just
   use [iter], but it is a good test of the type-checker. *)

val simpler_iter [a, p : perm] (xs: list a, f: (a | p) -> () | p) : () =
  iter (xs, f)

val yet_simpler_iter [a] (xs: list a, f: a -> ()) : () =
  iter (xs, f)

(* -------------------------------------------------------------------------- *)

(* Fold. *)

(* The following type allows the function [f] to perform a strong update
   on the argument list, whose type changes from [list a1] to [list a2]. An
   accumulator of type [b] is maintained. *)

(* It is not necessary to explicitly thread a permission [p], because the
   type [b] already serves this purpose. *)
 
val rec fold_left [a1, a2, b] (
  f: (consumes       b, consumes  x:      a1) -> (b |  x @      a2),
      consumes accu: b, consumes xs: list a1)  : (b | xs @ list a2)
=
  if xs then
    fold_left (f, f (accu, xs.head), xs.tail)
  else
    accu

val rec fold_right [a1, a2, b] (
  f: (consumes  x:      a1, consumes       b) -> (b |  x @      a2),
      consumes xs: list a1, consumes accu: b)  : (b | xs @ list a2)
=
  if xs then
    f (xs.head, fold_right (f, xs.tail, accu))
  else
    accu

(* -------------------------------------------------------------------------- *)

(* Various flavors of list search. *)

(* Note that these are not instances of [fold], because we need to bail out
   early when the search is successful. *)

val rec for_all [a, p : perm] (ok: (a | p) -> bool, xs: list a | p) : bool =
  if xs then
    if ok xs.head then for_all (ok, xs.tail) else False
  else
    True

val rec rich_for_all
  [a, p : perm, q : perm] (ok: (a | p) -> rich_bool q empty, xs: list a | p) : rich_bool q empty =
  match xs with
  | Nil ->
      True
  | Cons { head; tail } ->
      conjunction (
        ok head,
        fun (| p * tail @ list a) : rich_bool q empty =
          rich_for_all (ok, tail)
      )
  end

val rec rich_for_all_with_inlined_conjunction
  [a, p : perm, q : perm] (ok: (a | p) -> rich_bool q empty, xs: list a | p) : rich_bool q empty =
  match xs with
  | Nil ->
      True
  | Cons { head; tail } ->
      ok head && rich_for_all_with_inlined_conjunction (ok, tail)
  end

val rec exists [a, p : perm] (ok: (a | p) -> bool, xs: list a | p) : bool =
  if xs then
    if ok xs.head then True else exists (ok, xs.tail)
  else
    False

val rec rich_exists_with_inlined_disjunction
  [a, p : perm, q : perm] (ok: (a | p) -> rich_bool empty q, xs: list a | p) : rich_bool empty q =
  match xs with
  | Nil ->
      False
  | Cons { head; tail } ->
      ok head || rich_exists_with_inlined_disjunction (ok, tail)
  end

(* The function [find] cannot raise an exception, as it does in OCaml.
   Instead, it returns a sub-list, which either is empty or begins with
   the desired element. This is more general than returning an option,
   since it allows repeated searches, and is more efficient, since it
   does not require memory allocation! *)

val rec find [a, p : perm] (ok: (a | p) -> bool, consumes xs: list a | p) : list a =
  if xs then
    if ok xs.head then xs else find (ok, xs.tail)
  else
    xs

(* The call [remove (ok, xs)] produces the list [xs], deprived of the first
   element that satisfies the predicate [ok], if there is one. *)

val rec remove [a, p : perm] (ok : (a | p) -> bool, consumes xs: list a | p) : list a =
  if xs then
    if ok xs.head then xs.tail else Cons { head = xs.head; tail = remove (ok, xs.tail) }
  else
    xs

(* The function [mem] is parameterized with a notion of equality. It is just a
   variant of [find] that does not require the function [equal] to be
   partially applied to [x] ahead of time. *)

val mem [a, p : perm] (equal: (a, a | p) -> bool, x: a, consumes xs: list a | p) : list a =
  let ok (y : a | x @ a * p) : bool =
    equal (x, y)
  in
  find (ok, xs)

val rec mem [a, p : perm] (equal: (a, a | p) -> bool, x: a, consumes xs: list a | p) : list a =
  if xs then
    if equal (x, xs.head) then xs else mem (equal, x, xs.tail)
  else
    Nil

(* Consuming the list can be problematic when it is not duplicable. Here is a
   variant that does not consume the list and only returns a Boolean value. *)

val rec member [a, p : perm] (
  equal: (a, a | p) -> bool,
  x: a, xs: list a
| p) : bool =
  if xs then equal(x, xs.head) || member(equal, x, xs.tail) else false

(* [assoc] is a version of [find]. It is specialized with a notion of equality
   of key-value pairs as equality of keys. *)

val assoc [a, b, p : perm] (equal: (a, a | p) -> bool, x: a, consumes xs: list (a, b) | p) : list (a, b) =
  let ok (y: a, _: b | x @ a * p) : bool =
    equal (x, y)
  in
  find (ok, xs)

(* TEMPORARY
   mem   should be called find_equal
   assoc should be called find_equal_key
   remove could be specialized in the same ways as find *)

(* -------------------------------------------------------------------------- *)

(* Filtering. *) 

val filter [a, p : perm] (consumes xs: list a, ok: (a | p) -> bool | p) : list a =
  let f (consumes accu: list a, consumes x: a | p) : list a =
    if ok x then Cons { head = x; tail = accu } else accu
  in
  rev (fold_left [a, unknown, (list a | p)] (f, Nil, xs))

val partition [a] (p: a -> bool, consumes xs: list a) : (list a, list a) =
  let f (consumes (yes: list a, no: list a), consumes x: a) : (list a, list a) =
    if p x then
      Cons { head = x; tail = yes }, no
    else
      yes, Cons { head = x; tail = no }
  in
  let (yes, no) = fold_left [a, unknown, (list a, list a)] (f, (Nil, Nil), xs) in
  rev yes, rev no

(* -------------------------------------------------------------------------- *)

(* Iterator. *)

(* Implementation of ADT-style iterators on lists.

   Given the alias type [iterator a post], the [next] and [stop] functions, one
   can wrap this iterator to a generic iterator using [iterator::wrap].

   It is also possible to directly create a generic iterator from a list, using
   [new_generic_iterator].
*)

alias iterator a (post: perm) =
  ref (focused::focused (list a) post)

(* Base functions *)

val new_iterator [a] (consumes l: list a): iterator a (l @ list a) =
  newref (l, fun (): () = ())

val next
  [a, post : perm]
  (consumes it: iterator a post)
: either::either (focused::focused a (it @ iterator a post)) (| post) =

  let l, rewind_to_list = !it in
  match l with
  | Nil ->
    rewind_to_list ();
    either::right ()
  | Cons { head; tail } ->
      it := (tail, rewind_to_list);

      let flex p : perm in
      (* By unpacking the [osf::osf] definition, we have:
         p * rewind_to_list @ (| consumes (l @ list a) * p) -> (| post)
      *)

      (* This is a bit heavy: we create a new [rewind_to_iterator]
         function for each value returned by [next].

         Its purpose is, provided the needed permissions to rewind,
         namely [head @ a], to repack [rewind_to_list] so we can have [it
         @ list_iterator a post] again.
      *)
      let rewind_to_iterator (|
          consumes (
            head @ a *
            it @ Ref { contents: (=tail, =rewind_to_list) } *
            (* The following bunch of permissions will be abstracted
               by the existential quantification of the [osf::osf]
               alias *)
            l @ Cons { head; tail } * tail @ list a * p
          )
      ): (| it @ iterator a post)
          =
        pack rewind_to_list @ osf::osf (| tail @ list a) (| post)
          witness (p * (head @ a) * (l @ Cons { head; tail }));

        assert (rewind_to_list @ osf::osf (| tail @ list a) (| post));
        ()
      in

      (* This assert is superfluous. *)
      assert (rewind_to_iterator @ osf::osf (| head @ a) (| it @ iterator a post));

      either::left (head, rewind_to_iterator)
  end

val stop [a, post: perm]
  (consumes it: iterator a post):
  (| post) =
  let _, rewind_to_list = !it in
  rewind_to_list ()

(* Directly provides an OO-style generic iterator ([iterator::iterator]) *)

val new_generic_iterator [a] (consumes l: list a):
  iterator::iterator a (l @ list a) =

  let alias post: perm = l @ list a in
  iterator::wrap [a, (iterator a post), post]
    (new_iterator l, next [a, post], stop [a, post])

(* -------------------------------------------------------------------------- *)

(* Lists of pairs. *)

val rec split [a, b] (consumes xys : list (a, b)) : (list a, list b) =
  if xys then begin
    let x, y = xys.head in
    let xs, ys = split xys.tail in
    Cons { head = x; tail = xs },
    Cons { head = y; tail = ys }
  end
  else
    Nil,
    Nil

val rec combine [a, b] (consumes xs: list a, consumes ys: list b) : list (a, b) =
  match xs, ys with
  | Cons, Cons ->
      Cons { head = (xs.head, ys.head); tail = combine (xs.tail, ys.tail) }
  | Nil, Nil ->
      Nil
  | Nil, Cons ->
      Nil
  | Cons, Nil ->
      Nil
  end

(* -------------------------------------------------------------------------- *)

(* This auxiliary function is used by [sort]. It peforms a dynamic test
   of duplicability in order to choose between two ways of splitting a
   list, one of which causes the list elements to apparently become
   shared. *)

(* While porting [sort] from OCaml's standard library, we encountered an
   ownership problem. OCaml's code uses a trick, which is to *not* truncate
   the list in the first recursive call. In other words, the first recursive
   instance of [sort] is passed the entire list, but has permission to use
   only the [n1] first elements of it. Mezzo's type system cannot express this
   subtlety. As a result, it seems that we have to either restrict the code to
   the case where the type [a] is duplicable, or truncate the list that is
   passed to the first recursive call (at a cost). In fact, we can encapsulate
   both versions of the code into a single [sort] function, which takes an
   argument of [duplicability a], and performs the choice at runtime,
   depending on the type [a]. This is perhaps not great, but it shows that we
   do have a few tricks up our sleeve. *)

val splitAtOrShareAndChop [a] (
  dupa: reflection::duplicability a,
  k: int,
  consumes xs: list a
) : (list a, list a) =
  if dupa then
    (* If the list elements are duplicable, then we can follow the OCaml
       version of the code, and keep the first list unchanged. It is too
       long, but the extra elements will never be accessed. *)
    xs, chop (k, xs)
  else
    (* Otherwise, we have to use [splitAt], which is less efficient (the
       first part of the list spine is copied) but obviously does not
       cause the list elements to become shared. Our type system is not
       expressive enough to understand that ``we own only the first [k]
       elements of this list''. *)
    splitAt (k, xs)

(* -------------------------------------------------------------------------- *)

(* Merging and sorting. *)

(* Note: [merge] is not tail-recursive, and is not used by [sort],
   which has its own [rev_merge]. *)

val rec merge [a] (
  cmp: (a, a) -> int,
  consumes xs: list a,
  consumes ys: list a
) : list a =
  match xs, ys with
  | Nil, _ ->
      ys
  | _, Nil ->
      xs
  | Cons { head = x }, Cons { head = y } ->
      if cmp (x, y) <= 0
      then Cons { head = x; tail = merge (cmp, xs.tail, ys) }
      else Cons { head = y; tail = merge (cmp, xs, ys.tail) }
  end

val sort [a] (
  dupa: reflection::duplicability a,
  cmp: (a, a) -> int,
  consumes xs: list a
) : list a =
  (* Wrap the comparison function [cmp] so as to take an extra
     argument, [sense], which takes the value -1 or 1 and allows
     reversing the ordering if desired. *)
  let cmp (sense: int, x: a, y: a) : int =
    sense * cmp (x, y)
  in
  (* [rev_merge (sense, xs, ys, accu)] merges the lists [xs] and [ys]
     and concatenates the reverse of the resulting list in front of
     [accu]. The ordering is dictated by [sense]. *)
  let rec rev_merge (sense: int, consumes xs: list a, consumes ys: list a, consumes accu: list a) : list a =
    if xs then
      if ys then begin
        let x = xs.head
        and y = ys.head in
        if cmp (sense, x, y) <= 0
        then rev_merge (sense, xs.tail, ys, Cons { head = x; tail = accu })
        else rev_merge (sense, xs, ys.tail, Cons { head = y; tail = accu })
      end
      else
        rev_append (xs, accu)
    else
      rev_append (ys, accu)
  in
  (* This is the main sorting function. The integer [n] is always at
     least [2], and is less than or equal to the length of [xs]. Again,
     the ordering is dictated by [sense]. *)
  let rec sort (sense: int, n: int, consumes xs: list a) : list a =
    (* Leaf cases. *)
    if n = 2 then
      match xs with
      | Cons { head = x1; tail = Cons { head = x2; tail = any }} ->
          if cmp (sense, x1, x2) <= 0 then two (x1, x2) else two (x2, x1)
      | _ ->
         fail (* impossible *)
      end
    else if n = 3 then
      match xs with
      | Cons { head = x1; tail = Cons { head = x2; tail = Cons { head = x3; tail = any }}} ->
          if cmp (sense, x1, x2) <= 0 then begin
            if cmp (sense, x2, x3) <= 0 then three (x1, x2, x3)
            else if cmp (sense, x1, x3) <= 0 then three (x1, x3, x2)
            else three (x3, x1, x2)
          end else begin
            if cmp (sense, x1, x3) <= 0 then three (x2, x1, x3)
           else if cmp (sense, x2, x3) <= 0 then three (x2, x3, x1)
           else three (x3, x2, x1)
          end
      | _ ->
         fail (* impossible *)
      end
    (* The general case. *)
    else begin
      let n1 = n / 2 in
      let n2 = n - n1 in
      let xs1, xs2 = splitAtOrShareAndChop (dupa, n1, xs) in
      let xs1 = sort (-sense, n1, xs1) in
      let xs2 = sort (-sense, n2, xs2) in
      rev_merge (-sense, xs1, xs2, Nil)
    end
  in
  let n = length xs in
  if n < 2 then xs else sort (1, n, xs)

(* -------------------------------------------------------------------------- *)

(* Comparison. *)

val rec equal [a, b] (eq: (a, b) -> bool, xs: list a, ys: list b) : bool =
  if xs then
    if ys then
      if eq (xs.head, ys.head) then
        equal (eq, xs.tail, ys.tail)
      else
        False
    else
      False
  else
    if ys then
      False
    else
      True

val rec compare [a, b] (cmp: (a, b) -> int, xs: list a, ys: list b) : int =
  if xs then
    if ys then begin
      let c = cmp (xs.head, ys.head) in
      if c = 0 then
        compare (cmp, xs.tail, ys.tail)
      else
        c
    end
    else
      1
  else
    if ys then
      -1
    else
      0

(* -------------------------------------------------------------------------- *)

(* Conversions between arrays and lists. *)

(* Converting an array (segment) to a list. *)

val rec segment2list [a, m] duplicable a => (x: array m a, i: int, j: int, consumes accu: list a) : list a =
  if i < j then
    segment2list (x, i, j - 1, Cons { head = array::get (x, j - 1); tail = accu })
  else
    accu

val array2list [a, m] duplicable a => (x: array m a) : list a =
  segment2list (x, 0, array::length x, Nil)

(* TEMPORARY using [array::transform], we could offer a variant of [array2list]
   where the ownership of the elements is transferred from the array to the list *)

(* Converting a list to an array. *)

val list2array [a, m] (consumes xs: list a) : array m a =
  let n = length xs in
  let r = newref xs in
  array::init (Up, n, fun (i: int | r @ ref (list a)) : a =
    match !r with
    | Cons { head; tail } ->
        r := tail;
        head
    | Nil ->
        fail (* impossible *)
    end
  )

(*
Local Variables:
compile-command: "../mezzo list.mz"
End:
*)
