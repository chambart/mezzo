(* For the moment, we hold the lock while the client function [f] is busy. In
   a concurrent implementation, we might wish to hold the lock only during a
   short period. We could release the lock before invoking [f], and acquire it
   again when [f] is done (suggestion by Guillaume Melquiond). Some thought
   would be required if we wish to guarantee that [f] is invoked at most once
   for every input. TEMPORARY *)

(* TEMPORARY maybe we could memoize the function without hiding its state
   at all (so the memoized function would need t @ table a b * s) and then
   use hide::hide separately. *)

open lock (* new, acquire, release *)
open hashtable (* table, create, find, add *)

(* The simple memoizing combinator. *)

(* A lock is used to protect the hash table and to allow its use in a
   duplicable object (the memoized function). The lock also protects
   the permission [s]. *)

val memoize
  [a, b, s : perm]
  duplicable a => duplicable b =>
  (hash: a -> int, eq: (a, a) -> bool, f: (a | s) -> b | consumes s)
  : a -> b =

  (* Create the internal hash table. *)
  let t = create (11, hash, eq) in
  (* Create a lock which (at runtime) prevents re-entrant calls
     into the memoized function and (at type-checking time) allows
     us to hide the existence of the hash table. *)
  let l : lock (t @ table a b * s) = new () in

  (* Now, construct the memoized function. *)
  fun (x: a) : b =
    (* Acquire the lock. This yields the permission [t @ table a b]. *)
    acquire l;
    (* Find [y] in the table, if it is there already, or compute [y]
       and store it in the table for potential later re-use. *)
    let y =
      match find (x, t) with
      | Some { contents = y } ->
          y
      | None ->
          let y = f x in
          assert l @ locked;
          add (x, y, t);
          y
      end
    in
    (* Release the lock. This consumes [t @ table a b]. *)
    release l;
    (* Return [y]. *)
    y

(* The recursive memoizing combinator. *)

(* A technician would say that, by requiring [f] to be polymorphic in [p], we
   are manually building in an application of the second-order frame rule.
   This allows us to pass the permission [t @ table a b], disguised as an
   abstract permission [p], to the function [f], which itself passes it on to
   [self]. This allows us not to release and re-acquire the lock at every
   recursive invocation. Incidentally, it guarantees that [f] cannot store
   [self] and invoke it at a later time. *)

val fix
  [a, b]
  duplicable a => duplicable b =>
  (
    hash: a -> int,
    eq: (a, a) -> bool,
    f: [p : perm] (
      (a | p) -> b,
      a
    | p
    ) -> b
  ) 
  : a -> b =

  (* Create the internal hash table and lock. *)
  let t = create (11, hash, eq) in
  let l : lock (t @ table a b) = new () in

  (* For the sake of efficiency, we prefer not to release and re-acquire
     the lock at every recursive invocation. Thus, the recursive function
     that we define below assumes that the lock is held -- hence, the
     table is available. *)

  (* Construct the recursive function. *)
  let rec memoized (x: a | t @ table a b) : b =
    match find (x, t) with
    | Some { contents = y } ->
        y
    | None ->
       let y = f (memoized, x) in
       add (x, y, t);
       y
    end
  in

  (* Now, construct the final memoized function. *)
  fun (x: a) : b =
    (* Acquire the lock. This yields the permission [t @ table a b]. *)
    acquire l;
    (* Invoke the recursive computation. *)
    let y = memoized x in
    (* Release the lock. This consumes [t @ table a b]. *)
    release l;
    (* Return [y]. *)
    y

(* TEMPORARY once the bug is fixed, we might wish [fix] to have type

val fix
  [a, b, s : perm]
  duplicable a => duplicable b =>
  (
    hash: a -> int,
    eq: (a, a) -> bool,
    f: [p : perm] ((a | p * s) -> b, a | p * s) -> b
  ) 
  : (a | s) -> b =

This requires adding *s to memoized,
adding |s to the final anonymous function. *)

(*
Local Variables:
compile-command: "../mezzo memoize.mz"
End:
*)
