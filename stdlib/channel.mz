open lock
open queue
open condition

(* An implementation of an unbounded-capacity channel based on a FIFO queue,
   a lock, and a condition variable. *)

(* A channel is a triple of a queue [q], a lock [l] that yields exclusive
   access to [q], and a condition variable for [l]. A channel is duplicable:
   multiple threads may simultaneously attempt to send or receive. *)

alias channel a =
  (q: unknown, l: lock (q @ fifo a), condition l)

(* Channel creation. *)

(* A queue [q] is created and its exclusive permission is straight away
   hidden by a lock. *)

val new [a] () : channel a =
  let q = queue::create () in
  let l : lock (q @ fifo a) = lock::new () in
  let cond = condition::new l in
  q, l, cond

(* Sending. *)

(* Acquire the lock, insert the element, wake up any waiting receivers,
   release the lock. *)

val send [a] (c: channel a, consumes x: a) : () =
  let q, l, cond = c in
  acquire l;
  insert (x, q);
  if length q = 1 then
    signal (cond, SignalMany);
  release l

(* Receiving. *)

(* If there is no message in the queue, wait on the condition variable. *)

val receive [a] (c : channel a) : a =
  let q, l, cond = c in
  acquire l;

  (* A call to [loop] requires the lock [l] to be held. The lock is released
     when the reception finally succeeds. According to the semantics of
     [wait], the lock is temporarily released while the thread is suspended. *)

  let rec loop (| consumes (q @ fifo a * l @ locked)) : a =
    match retrieve q with
    | None ->
        wait cond;
        loop()
    | Some { contents = x } ->
        release l;
        x
    end 
  in
  loop()

(*
Local Variables:
compile-command: "../mezzo channel.mz"
End:
*)
