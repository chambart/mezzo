open lock
open queue
open condition

(* Deriving channels using locks and queues. *)

(* A channel is a triple formed by a queue [q], a lock [l] that protects
   the exclusive permission on [q], and a condition variable on [l].
   A channel is duplicable: multiple threads may simultaneously try to
   send or receive by waiting on the condition variable. *)

alias channel a =
  (q: unknown, l: lock (q @ fifo a), condition l)

(* Channel creation. *)

(* A queue [q] is created and its exclusive permission is straight away
   hidden by a lock. *)

val new [a] (): channel a =
  let q = queue::create () in
  let l: lock (q @ fifo a) = lock::new () in
  let c = condition::new l in
  (q, l, c)

(* Send. *)

(* Sending on the channel requires acquiring the lock. *)

(* francois: I think it is preferable to send the signal
   before releasing the lock, but maybe we should ask an
   expert (Luc?). TEMPORARY *)

val send [a] (c: channel a, consumes x: a): () =
  let q, l, cond = c in
  acquire l;
  insert (x, q);
  if length q = 1 then
    signal (cond, SignalMany);
  release l

(* Receive. *)

(* This call does not require anything. If there is no message available,
   it will suspend the thread and wait on the condition variable. *)

val receive [a] (c: channel a): a =
  let q, l, cond = c in
  acquire l;

  (* A call to [receive_aux] requires the lock [l] to be held. The
     lock is released when the reception finally succeeds. According to
     the semantics of wait it is also temporarily released while the
     thread is suspended. *)

  let rec receive_aux (| consumes (q @ fifo a * held l) ): a =
    match retrieve q with
    | None ->
        wait cond; receive_aux ()
    | Some { contents = x } ->
        release l; x
    end 
  in

  receive_aux ()


(*
Local Variables:
compile-command: "../mezzo channel.mz"
End:
*)
