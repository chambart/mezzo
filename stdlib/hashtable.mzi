abstract table k +a
fact exclusive (table k a)

(* -------------------------------------------------------------------------- *)

(* Creation. *)

val create : [k, a] (
  capacity: int,
  hash: k -> int,
  equal: (k, k) -> bool
) -> table k a

(* -------------------------------------------------------------------------- *)

(* Clearing. *)

val clear : [k, a] table k a -> ()
val reset : [k, a] (table k a, capacity: int) -> ()

(* -------------------------------------------------------------------------- *)

(* Insertion. *)

val add : [k, a] (consumes k, consumes a, table k a) -> ()

(* -------------------------------------------------------------------------- *)

(* Merging. *)

(* [merge (t1, t2)] does not require the two tables to use the same notions
   of equality of hashing. It is equivalent to successively inserting each
   element of [t1] into [t2]. *)

val merge: [k, a] (consumes table k a, table k a) -> ()

(* -------------------------------------------------------------------------- *)

(* Removal. *)

val remove : [k, a] (x: k, t: table k a) -> option a

(* -------------------------------------------------------------------------- *)

(* Lookup. *)

val mem : [k, a] (x: k, t: table k a) -> bool

val find     : [k, a] duplicable a => (x: k, t: table k a) -> option a
val find_all : [k, a] duplicable a => (x: k, t: table k a) -> list::list a

(* -------------------------------------------------------------------------- *)

(* Update. *)

(* [update (t, x, f)] looks for the key [x] in the table [t]. It calls the
   user-supplied function [f] exactly once, and passes it either the value [v]
   that is associated with the key [x], or nothing, if the key [x] does not
   appear in the table. The function [f] returns either a new value, or
   nothing. In the former case, the new value replaces the value [v]. In the
   latter case, the key [x] is removed (if it was there at all). *)

val update : [k, a, pre : perm, post : perm] (
  t: table k a,
  consumes x: k,
  f: (consumes (option a | pre)) -> (option a | post)
  | consumes pre
) -> (| post)

(* -------------------------------------------------------------------------- *)

(* Iteration. *)

val fold : [k, a, b] (
  t: table k a,
  consumes seed: b,
  f: (k, a, consumes b) -> b
) -> b

val iter : [k, a, p : perm] (
  t: table k a,
  f: (k, a | p) -> ()
  | p
) -> ()

(* -------------------------------------------------------------------------- *)

(* Statistics. *)

val cardinal : [k, a] (t: table k a) -> int

data statistics = Statistics {
  num_bindings: int;
  num_buckets: int;
  max_bucket_length: int;
  bucket_histogram: marray int
}

val stats : [k, a] (t: table k a) -> statistics
