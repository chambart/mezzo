(* A suspension, or thunk, is a delayed computation. A thunk is duplicable:
   multiple threads may request its result. The type system guarantees that
   the delayed computation is performed at most once. *)

abstract thunk +a
fact duplicable (thunk a)

(* Creation. *)

(* The delayed computation, represented by the function [f], may need a
   permission [p] in order to run. This permission must be passed to
   [create] when the thunk is created. Because [f] consumes [p] and
   [create] is given only one copy of [p], we know that [f] will be
   invoked at most once. In other words, [f] is a one-shot function. *)

val create: [a, p: perm] duplicable a => (
  f: (| consumes p) -> a
| consumes p
) -> thunk a

(* It is sometimes convenient to be able to build a thunk that is
   already evaluated. *)

val constant: [a] duplicable a => a -> thunk a

(* Creating a recursive thunk, i.e., a suspended computation that
   refers to itself. When one invokes [cyclic f], the function [f]
   is invoked immediately. It is applied to the thunk [self] that
   is being created, and must return a value, of type [a], for this
   thunk. Of course it must not attempt to force this thunk; it is
   allowed only to take its address. If it did attempt to force the
   thunk, a runtime failure would occur. *)

val cyclic: [a, p : perm] duplicable a => (
  f: (thunk a | consumes p) -> a
| consumes p
) -> thunk a

(* Demand. *)

val force: [a] thunk a -> a

