(* An iterator of type [iterator a post] allows enumerating a series of
   elements of type [a] (presumably the elements of some underlying
   collection) and, once stopped or finished, recovering the permission [p]
   (which typically represents the ownership of the underlying collection). *)

(* Concretely, an iterator is either: *)
data iterator a (post : perm) =

    (* finished, in which case the permission [post] is available, and the field
       [outcome] indicates whether the iteration was stopped or finished by itself; *)
    IFinished { outcome: outcome | post }

    (* or not finished, in which case an element [x] is available for inspection;
       this element is accompanied with two continuations, [stop] and [next]. Both
       of these continuations require an abstract permission [pre], only one copy
       of which is available, so the user is able to call [stop], or [next], but
       not both. (This is equivalent to a single continuation that takes a Boolean
       argument. We use two continuations because this allows us to assign [stop]
       a more precise return type than that of [next].) Furthermore, [stop] and
       [next] requires the ownership of [x], so the element can be inspected, but
       cannot be retained. *)
  | IAvailable { content: { pre : perm } item a pre post }

(* The following definitions are cumbersome, due to the lack of type
   abbreviations and the need to work around certain current bugs,
   e.g. can't use name-intro under an existential quantification.
   See [name-intro.mz]. Ideally, we don't need a separate type [item].
   TEMPORARY *)

data item a (pre : perm) (post : perm) =
  | Item { content: (
      x: a,
      stop: (| consumes (x @ a * pre)) -> IFinished { outcome: Stopped | post },
      next: (| consumes (x @ a * pre)) -> iterator a post
      | pre
    )}

data outcome =
  | Stopped
  | Done

(* TEMPORARY we might wish to represent an iterator that has not yet started
   as a (one-shot) function of unit to iterator a post. Otherwise, we are
   forcing the first element to be fetched immediately. *)

(*
Local Variables:
compile-command: "../mezzo iterator.mz"
End:
*)
