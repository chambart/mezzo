open lock

(* A function's internal state can be hidden using a lock. *)

(* This function is not as generic as I would like: it is parametric
   in the types [a] and [b], but it cannot be applied in the situation
   where [f] is a polymorphic function and we would like [hide f] to
   be polymorphic as well (assuming the quantified variable does not
   occur in [s]). In that situation, the user will have to copy/paste
   the code below. *)

val hide [a, b, s : perm] (
  f : (a | s) -> b
| consumes s
) : (a -> b)
=
  (* Allocate a new lock. *)
  let l : lock s = new () in
  (* Encapsulate [f] within an acquire/release pair. *)
  fun (x : a) : b =
    acquire l;
    let y = f x in
    release l;
    y

(*
Local Variables:
compile-command: "../mezzo hide.mz"
End:
*)
