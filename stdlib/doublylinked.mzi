(* TEMPORARY expose the type of cells not as [dynamic], but as an
   abstract [point], or [point r]. *)

(* ---------------------------------------------------------------------------- *)

(* A cell contains a payload of type [a]. *)

abstract cell +a

(* Cells can be created, consulted, destroyed. *)

val create:  [a] (consumes a) -> cell a

val consult: [a, b, pre : perm] (
  c: cell a,
  f: (a | consumes pre) -> b
| consumes pre
) -> b

val destroy: [a] (consumes cell a) -> a

(* ---------------------------------------------------------------------------- *)

(* A region contains many cells, organized in disjoint, non-empty cycles. *)

abstract region +a
fact exclusive (region a)

(* [new()] creates a new region. *)

val new: [a] () -> region a

(* [put (r, c)] places the cell [c] in the region [r]. The cell is
   isolated: that is, it forms a one-element cycle. *)

val put: [a] (region a, consumes c: cell a) -> (| c @ dynamic)

(* [get (r, c)] takes the cell [c] out of the region [r]. The cell
   must be isolated: that is, it must form a one-element cycle. *)

val get: [a] (region a, c: dynamic) -> (| c @ cell a)

(* ---------------------------------------------------------------------------- *)

(* Transforming cycles. *)

(* [meld (r, w, y)] requires [w] and [y] to be part of two distinct cycles,
   and melds these cycles. *)

val meld: [a] (region a, dynamic, dynamic) -> ()

(* [isolate (r, y)] ensures that [y] is isolated. If [y] is part of a cycle
   of length greater than one, then [y] is taken out of this cycle, and is
   made to form a cycle of length one. *)

val isolate: [a] (region a, dynamic) -> ()

(* [is_isolated (r, y)] tells whether [y] is isolated. *)

val is_isolated: [a] (region a, dynamic) -> bool

(* ---------------------------------------------------------------------------- *)

(* Walking. *)

(* [next (r, x)] returns the element that follows [x] along its cycle.
   [prev (r, x)] returns the element that precedes [x] along its cycle. *)

val next: [a] (region a, dynamic) -> dynamic
val prev: [a] (region a, dynamic) -> dynamic

(* ---------------------------------------------------------------------------- *)

(* Iteration. *)

(* [iter (r, x, f)] presents the elements of the cycle represented by [x] to
   the function [f]. The function does not have access to [r], so it cannot
   modify the region. (We could expose [iter] at a type that does provide
   access to the region, but that would be somewhat dangerous.) *)

val iter: [p : perm, a] (
  r: region a,
  x: dynamic,
  f: (dynamic | p) -> ()
| p) -> ()

(* [elements (r, x)] returns the elements of the cycle represented by [x]. *)

val elements: [a] (region a, dynamic) -> list::list dynamic

