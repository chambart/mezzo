(* A cell contains a payload of type [a]. *)

(* ---------------------------------------------------------------------------- *)

(* A region contains many cells, organized in disjoint, non-empty cycles. *)

abstract region +a
fact exclusive (region a)

abstract point +a
fact duplicable (point a)

(* [new()] creates a new region. *)

val new: [a] () -> region a

(* [create (r, x)] creates a new cell and places it in the region [r].
   The cell is isolated: that is, it forms a one-element cycle. *)

val create: [a] (r: region a, consumes x: a) -> point a

(* [consult (r, c, f)] applies the function [f] to the payload carried
   by the cell [c]. *)

val consult: [a, b, pre : perm] (
  r: region a,
  c: point a,
  f: (a | consumes pre) -> b
| consumes pre
) -> b

(* [destroy (r, c)] destroys the cell [c]. The cell must be isolated:
   that is, it must form a one-element cycle. *)

val destroy: [a] (r: region a, c: point a) -> a

(* ---------------------------------------------------------------------------- *)

(* Transforming cycles. *)

(* [meld (r, w, y)] requires [w] and [y] to be part of two distinct cycles,
   and melds these cycles. *)

val meld: [a] (region a, point a, point a) -> ()

(* [isolate (r, y)] ensures that [y] is isolated. If [y] is part of a cycle
   of length greater than one, then [y] is taken out of this cycle, and is
   made to form a cycle of length one. *)

val isolate: [a] (region a, point a) -> ()

(* [is_isolated (r, y)] tells whether [y] is isolated. *)

val is_isolated: [a] (region a, point a) -> bool

(* ---------------------------------------------------------------------------- *)

(* Walking. *)

(* [next (r, x)] returns the element that follows [x] along its cycle.
   [prev (r, x)] returns the element that precedes [x] along its cycle. *)

val next: [a] (region a, point a) -> point a
val prev: [a] (region a, point a) -> point a

(* ---------------------------------------------------------------------------- *)

(* Iteration. *)

(* [iter (r, x, f)] presents the elements of the cycle represented by [x] to
   the function [f]. The function does not have access to [r], so it cannot
   modify the region. (We could expose [iter] at a type that does provide
   access to the region, but that would be somewhat dangerous.) *)

val iter: [p : perm, a] (
  r: region a,
  x: point a,
  f: (point a | p) -> ()
| p) -> ()

(* [elements (r, x)] returns the elements of the cycle represented by [x]. *)

val elements: [a] (r: region a, point a) -> list::list (point a)

